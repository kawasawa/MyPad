<m:MetroWindow x:Class="MyPad.Views.MainWindow"
               xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
               xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
               xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
               xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
               xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
               xmlns:p="http://prismlibrary.com/"
               xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
               xmlns:m="http://metro.mahapps.com/winfx/xaml/controls"
               xmlns:mi="http://metro.mahapps.com/winfx/xaml/iconpacks"
               xmlns:le="http://wpflocalizeextension.codeplex.com"
               xmlns:qc="http://QuickConverter.CodePlex.com/"
               xmlns:ge="clr-namespace:SourceChord.GridExtra;assembly=GridExtra.Wpf"
               xmlns:pb="clr-namespace:PushBindingExtension;assembly=WinCopies.PushBinding"
               xmlns:dr="clr-namespace:Dragablz;assembly=Dragablz"
               xmlns:ae="http://icsharpcode.net/sharpdevelop/avalonedit"
               xmlns:behaviors="clr-namespace:MyPad.Views.Behaviors"
               xmlns:controls="clr-namespace:MyPad.Views.Controls"
               mc:Ignorable="d"
               p:ViewModelLocator.AutoWireViewModel="True"
               Style="{StaticResource App.Window}"
               Title="{qc:MultiBinding '($P0 ? $P1 : Path.GetFileName($P1)) + ($P2 ? \'*\' : null) + \' \- \' + $P3',
                       P0={Binding SettingsService.System.ShowFullName, Mode=OneWay},
                       P1={Binding ActiveTextEditor.Value.FileName, Mode=OneWay},
                       P2={Binding ActiveTextEditor.Value.IsModified, Mode=OneWay},
                       P3={Binding ProductInfo.Product, Mode=OneWay}}"
               Cursor="{qc:Binding '$P ? Cursors.Wait : Cursors.Arrow', P={Binding IsWorking.Value, Mode=TwoWay}}"
               Height="525" Width="850" ResizeMode="CanResizeWithGrip" WindowStartupLocation="CenterScreen" AllowDrop="True"
               Loaded="Window_Loaded" Closing="Window_Closing" Closed="Window_Closed" DataContextChanged="Window_DataContextChanged">

    <!-- リソース -->
    <Window.Resources>
        <Style x:Key="RegionContent" TargetType="{x:Type ContentControl}">
            <Setter Property="p:RegionManager.RegionManager" Value="{Binding RegionManager, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}"/>
            <Setter Property="Focusable" Value="False"/>
        </Style>
        <Style TargetType="{x:Type m:Flyout}" BasedOn="{StaticResource Default.Flyout}">
            <Setter Property="Position" Value="Left"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="IsModal" Value="True"/>
            <Setter Property="CloseButtonIsCancel" Value="True"/>
        </Style>
        <ContextMenu x:Key="ContextMenu">
            <MenuItem IsCheckable="True" IsChecked="{Binding SettingsService.System.ShowMenuBar,   Mode=TwoWay}" Header="{le:Loc Command_ShowMenuBar}"/>
            <MenuItem IsCheckable="True" IsChecked="{Binding SettingsService.System.ShowToolBar,   Mode=TwoWay}" Header="{le:Loc Command_ShowToolBar}"/>
            <MenuItem IsCheckable="True" IsChecked="{Binding SettingsService.System.ShowStatusBar, Mode=TwoWay}" Header="{le:Loc Command_ShowStatusBar}"/>
        </ContextMenu>
    </Window.Resources>

    <!-- イベントトリガー -->
    <i:Interaction.Triggers>
        <l:InteractionMessageTrigger MessageKey="ScrollToCaret" Messenger="{Binding Messenger, Mode=OneWay}">
            <i:CallMethodAction MethodName="ScrollToCaret" TargetObject="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}"/>
        </l:InteractionMessageTrigger>
        <i:EventTrigger EventName="Drop">
            <behaviors:WindowActivateAction/>
            <i:InvokeCommandAction Command="{Binding DropHandler, Mode=OneTime}" PassEventArgsToCommand="True"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="Closing">
            <i:InvokeCommandAction Command="{Binding ClosingHandler, Mode=OneTime}" PassEventArgsToCommand="True"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <!-- 入力バインディング -->
    <Window.InputBindings>
        <KeyBinding Command="{Binding NewCommand,                  Mode=OneTime}" Key="N"        Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding NewWindowCommand,            Mode=OneTime}" Key="N"        Modifiers="Ctrl+Shift"/>
        <KeyBinding Command="{Binding OpenCommand,                 Mode=OneTime}" Key="O"        Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding SaveCommand,                 Mode=OneTime}" Key="S"        Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding SaveAsCommand,               Mode=OneTime}" Key="S"        Modifiers="Ctrl+Shift"/>
        <KeyBinding Command="{Binding SaveAllCommand,              Mode=OneTime}" Key="K"        Modifiers="Ctrl+Shift"/>
        <KeyBinding Command="{Binding ExitApplicationCommand,      Mode=OneTime}" Key="F4"       Modifiers="Ctrl+Alt"/>
        <KeyBinding Command="{Binding CloseCommand,                Mode=OneTime}" Key="F4"       Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding PrintCommand,                Mode=OneTime}" Key="P"        Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding PrintPreviewCommand,         Mode=OneTime}" Key="P"        Modifiers="Ctrl+Shift"/>
        <KeyBinding Command="{Binding GoToLineCommand,             Mode=OneTime}" Key="G"        Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding OptionCommand,               Mode=OneTime}" Key="OemComma" Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding ChangeEncodingCommand,       Mode=OneTime}" Key="M"        Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding ChangeSyntaxCommand,         Mode=OneTime}" Key="M"        Modifiers="Ctrl+Shift"/>
        <KeyBinding Command="{Binding PropertyCommand,             Mode=OneTime}" Key="Enter"    Modifiers="Alt"/>
        <KeyBinding Command="{Binding DiffCommand,                 Mode=OneTime}" Key="D"        Modifiers="Ctrl+Shift"/>
        <KeyBinding Command="{Binding DiffUnmodifiedCommand,       Mode=OneTime}" Key="D"        Modifiers="Ctrl+Alt"/>
        <KeyBinding Command="{Binding SwitchFullScreenModeCommand, Mode=OneTime, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Key="F11"/>
    </Window.InputBindings>

    <!-- ウィンドウコマンド(右) -->
    <m:MetroWindow.RightWindowCommands>
        <m:WindowCommands>
            <ToggleButton IsChecked="{Binding Topmost, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=TwoWay}" ToolTip="{le:Loc Command_Topmost}" Focusable="False">
                <mi:PackIconModern Kind="Pin" Foreground="{DynamicResource MahApps.Brushes.ThemeForeground}">
                    <mi:PackIconModern.Resources>
                        <Style TargetType="{x:Type mi:PackIconModern}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Topmost, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}" Value="True">
                                    <Setter Property="RenderTransform">
                                        <Setter.Value>
                                            <RotateTransform Angle="-45" CenterX="7" CenterY="7"/>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </mi:PackIconModern.Resources>
                </mi:PackIconModern>
            </ToggleButton>
            <Button Command="{Binding SwitchFullScreenModeCommand, Mode=OneTime, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" ToolTip="{le:Loc Command_SwitchFullScreenMode}">
                <mi:PackIconModern Kind="Fullscreen" Foreground="{DynamicResource MahApps.Brushes.ThemeForeground}"/>
            </Button>
        </m:WindowCommands>
    </m:MetroWindow.RightWindowCommands>

    <!-- ウィンドウコマンド(左) -->
    <m:MetroWindow.LeftWindowCommands>
        <m:WindowCommands Margin="0 2 0 0">
            <ContentControl Style="{StaticResource RegionContent}" p:RegionManager.RegionName="MenuBarRegion1"
                            Visibility="{qc:Binding '$P ? Visibility.Visible : Visibility.Collapsed', P={Binding SettingsService.System.ShowMenuBar, Mode=OneWay}}"/>
        </m:WindowCommands>
    </m:MetroWindow.LeftWindowCommands>

    <!-- フライアウト -->
    <m:MetroWindow.Flyouts>
        <m:FlyoutsControl>
            <m:Flyout Header="{le:Loc Command_Diff}" IsOpen="{Binding IsOpenDiffContent.Value, Mode=TwoWay}">
                <ContentControl Style="{StaticResource RegionContent}" p:RegionManager.RegionName="DiffContentRegion"/>
            </m:Flyout>
            <m:Flyout Header="{le:Loc Command_Property}" IsOpen="{Binding IsOpenPropertyContent.Value, Mode=TwoWay}">
                <ContentControl Style="{StaticResource RegionContent}" p:RegionManager.RegionName="PropertyContentRegion"/>
            </m:Flyout>
            <m:Flyout Header="{le:Loc Command_Print}" IsOpen="{Binding IsOpenPrintPreviewContent.Value, Mode=TwoWay}">
                <ContentControl Style="{StaticResource RegionContent}" p:RegionManager.RegionName="PrintPreviewContentRegion"/>
            </m:Flyout>
            <m:Flyout Header="{le:Loc Command_Option}" IsOpen="{Binding IsOpenOptionContent.Value, Mode=TwoWay}">
                <ContentControl Style="{StaticResource RegionContent}" p:RegionManager.RegionName="OptionContentRegion"/>
            </m:Flyout>
            <m:Flyout Header="{le:Loc Command_About}" IsOpen="{Binding IsOpenAboutContent.Value, Mode=TwoWay}">
                <ContentControl Style="{StaticResource RegionContent}" p:RegionManager.RegionName="AboutContentRegion"/>
            </m:Flyout>
        </m:FlyoutsControl>
    </m:MetroWindow.Flyouts>

    <!-- 画面コンテンツ -->
    <Grid ge:GridEx.RowDefinition="Auto, Auto, *, Auto">
        <ContentControl Grid.Row="0" Style="{StaticResource RegionContent}" p:RegionManager.RegionName="MenuBarRegion2"
                        Visibility="{qc:MultiBinding '$P0 ## !$P1 ? Visibility.Visible : Visibility.Collapsed',
                                     P0={Binding SettingsService.System.ShowMenuBar, Mode=OneWay},
                                     P1={Binding ShowTitleBar, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type Window}}}}"
                        ContextMenu="{StaticResource ContextMenu}"/>
        <ContentControl Grid.Row="1" Style="{StaticResource RegionContent}" p:RegionManager.RegionName="ToolBarRegion"
                        Visibility="{qc:Binding '$P ? Visibility.Visible : Visibility.Collapsed', P={Binding SettingsService.System.ShowToolBar, Mode=OneWay}}"
                        ContextMenu="{StaticResource ContextMenu}"/>
        <ContentControl Grid.Row="3" Style="{StaticResource RegionContent}" p:RegionManager.RegionName="StatusBarRegion"
                        Visibility="{qc:Binding '$P ? Visibility.Visible : Visibility.Collapsed', P={Binding SettingsService.System.ShowStatusBar, Mode=OneWay}}"
                        ContextMenu="{StaticResource ContextMenu}"/>

        <controls:DraggableTabControl Grid.Row="2" x:Name="DraggableTabControl"
                                      ItemsSource="{Binding TextEditors, Mode=OneWay}"
                                      SelectedItem="{Binding ActiveTextEditor.Value, Mode=TwoWay}"
                                      NewItemFactory="{Binding TextEditorFactory, Mode=OneTime}"
                                      ClosingItemCallback="{Binding ClosingTextEditorHandler, Mode=OneTime}"
                                      IsHeaderPanelVisible="{qc:MultiBinding '$P0 || $P1.CompareTo(1) == 1', P0={Binding SettingsService.System.ShowSingleTab, Mode=OneWay}, P1={Binding Items.Count, RelativeSource={RelativeSource Self}, Mode=OneWay}}"
                                      ShowDefaultAddButton="True"
                                      ShowDefaultCloseButton="True"
                                      SelectionChanged="DraggableTabControl_SelectionChanged">
            <dr:TabablzControl.InterTabController>
                <dr:InterTabController InterTabClient="{Binding InterTabClient, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}"/>
            </dr:TabablzControl.InterTabController>
            <dr:TabablzControl.HeaderItemTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <Image Source="{Binding FileIcon, Mode=OneWay}" Height="15" Margin="0 0 5 0" Visibility="{qc:MultiBinding '$P0 != null ## $P1 ? Visibility.Visible : Visibility.Collapsed', P0={Binding FileIcon, Mode=OneWay}, P1={Binding DataContext.SettingsService.System.ShowFileIcon, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}}"/>
                        <TextBlock DataContext="{Binding Mode=OneWay}" Text="{qc:MultiBinding 'string.Concat(Path.GetFileName($P0), $P1 ? \'*\' : null)', P0={Binding FileName, Mode=OneWay}, P1={Binding IsModified, Mode=OneWay}}" VerticalAlignment="Center"/>
                    </StackPanel>
                </DataTemplate>
            </dr:TabablzControl.HeaderItemTemplate>
            <dr:TabablzControl.ItemContainerStyle>
                <Style TargetType="{x:Type dr:DragablzItem}" BasedOn="{StaticResource Default.DragablzItem}">
                    <EventSetter Event="MouseRightButtonDown" Handler="DragablzItem_MouseRightButtonDown"/>
                    <Setter Property="ToolTipService.IsEnabled" Value="{qc:Binding '!$P', P={Binding IsNewFile, Mode=OneWay}}"/>
                    <Setter Property="ToolTip" Value="{Binding FileName, Mode=OneWay}"/>
                    <Style.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, Mode=OneWay}" Value="True"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource RedColorBrush}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, Mode=OneWay}" Value="True"/>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource RedColorBrush}"/>
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </dr:TabablzControl.ItemContainerStyle>
            <dr:TabablzControl.ContextMenu>
                <ContextMenu>
                    <MenuItem Command="{Binding CloseCommand, Mode=OneTime}" Header="{le:Loc Command_Close}" InputGestureText="Ctrl+F4">
                        <MenuItem.Icon>
                            <mi:Material Kind="Close"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="{Binding CloseAllCommand, Mode=OneTime}" Header="{le:Loc Command_CloseAll}">
                        <MenuItem.Icon>
                            <mi:Material Kind="LayersOff"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="{Binding CloseOtherCommand, Mode=OneTime}" Header="{le:Loc Command_CloseOther}">
                        <MenuItem.Icon>
                            <mi:Material Kind="LayersRemove"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="{le:Loc Command_OpenParentDirectory}" IsEnabled="{qc:Binding '!$P', P={Binding ActiveTextEditor.Value.IsNewFile, Mode=OneWay}}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Click">
                                <behaviors:ProcessStartAction FileName="explorer.exe" Arguments="{qc:Binding '\'/select, \' + $P', P={Binding ActiveTextEditor.Value.FileName, Mode=OneWay}}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <MenuItem.Icon>
                            <mi:Material Kind="FolderOpen"/>
                        </MenuItem.Icon>
                    </MenuItem>
                </ContextMenu>
            </dr:TabablzControl.ContextMenu>
            <dr:TabablzControl.ContentTemplate>
                <DataTemplate>
                    <controls:TextEditor x:Name="TextEditor">
                        <controls:TextEditor.Resources>
                            <Style TargetType="{x:Type ae:SearchPanel}" BasedOn="{StaticResource Default.SearchPanel}">
                                <Setter Property="Localization" Value="{Binding Localization, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}"/>
                            </Style>
                        </controls:TextEditor.Resources>
                        <controls:TextEditor.Style>
                            <Style TargetType="{x:Type controls:TextEditor}" BasedOn="{StaticResource Default.TextEditor}">
                                <EventSetter Event="Loaded" Handler="TextEditor_Loaded"/>
                                <Setter Property="Settings"         Value="{Binding DataContext.SettingsService.TextEditor, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}"/>
                                <Setter Property="Document"         Value="{Binding Document, Mode=OneWay}"/>
                                <Setter Property="IsReadOnly"       Value="{Binding IsReadOnly, Mode=TwoWay}"/>
                                <Setter Property="IsModified"       Value="{Binding IsModified, Mode=TwoWay}"/>
                                <Setter Property="SyntaxDefinition" Value="{Binding SyntaxDefinition, Mode=TwoWay}"/>
                                <Setter Property="OverstrikeMode"   Value="{Binding OverstrikeMode, Mode=TwoWay}"/>
                                <Setter Property="Line"             Value="{Binding Line, Mode=TwoWay}"/>
                                <Setter Property="Column"           Value="{Binding Column, Mode=TwoWay}"/>
                                <Setter Property="VisualColumn"     Value="{Binding VisualColumn, Mode=TwoWay}"/>
                                <Setter Property="pb:PushBindingManager.StylePushBindings">
                                    <Setter.Value>
                                        <pb:PushBindingCollection>
                                            <pb:PushBinding TargetProperty="ActualFontSize"       Path="ActualFontSize"/>
                                            <pb:PushBinding TargetProperty="ZoomIncrement"        Path="ZoomIncrement"/>
                                            <pb:PushBinding TargetProperty="VisualLength"         Path="VisualLength"/>
                                            <pb:PushBinding TargetProperty="TextLength"           Path="TextLength"/>
                                            <pb:PushBinding TargetProperty="SelectionLength"      Path="SelectionLength"/>
                                            <pb:PushBinding TargetProperty="SelectionStart"       Path="SelectionStart"/>
                                            <pb:PushBinding TargetProperty="SelectionEnd"         Path="SelectionEnd"/>
                                            <pb:PushBinding TargetProperty="SelectionStartLine"   Path="SelectionStartLine"/>
                                            <pb:PushBinding TargetProperty="SelectionEndLine"     Path="SelectionEndLine"/>
                                            <pb:PushBinding TargetProperty="SelectionLineCount"   Path="SelectionLineCount"/>
                                            <pb:PushBinding TargetProperty="SelectedText"         Path="SelectedText"/>
                                            <pb:PushBinding TargetProperty="CharName"             Path="CharName"/>
                                            <pb:PushBinding TargetProperty="IsAtEndOfLine"        Path="IsAtEndOfLine"/>
                                            <pb:PushBinding TargetProperty="IsInVirtualSpace"     Path="IsInVirtualSpace"/>
                                            <pb:PushBinding TargetProperty="EnableAutoCompletion" Path="EnableAutoCompletion"/>
                                        </pb:PushBindingCollection>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </controls:TextEditor.Style>
                        <controls:TextEditor.ContextMenu>
                            <ContextMenu>
                                <MenuItem Command="Undo"
                                          Header="{le:Loc Command_Undo}">
                                    <MenuItem.Icon>
                                        <mi:Modern Kind="UndoCurve"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Command="Redo"
                                          Header="{le:Loc Command_Redo}">
                                    <MenuItem.Icon>
                                        <mi:Modern Kind="RedoCurve"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <Separator/>
                                <MenuItem Command="Cut"
                                          Header="{le:Loc Command_Cut}">
                                    <MenuItem.Icon>
                                        <mi:Modern Kind="Scissor"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Command="Copy"
                                          Header="{le:Loc Command_Copy}">
                                    <MenuItem.Icon>
                                        <mi:Modern Kind="PageCopy"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Command="Paste"
                                          Header="{le:Loc Command_Paste}">
                                    <MenuItem.Icon>
                                        <mi:Modern Kind="ClipboardPaste"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Command="EditingCommands.Delete"
                                          Header="{le:Loc Command_Delete}"
                                          InputGestureText="Del">
                                    <MenuItem.Icon>
                                        <mi:Material Kind="Eraser"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Command="SelectAll"
                                          Header="{le:Loc Command_SelectAll}">
                                    <MenuItem.Icon>
                                        <mi:Modern Kind="CursorDefault"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <Separator/>
                                <MenuItem Header="{le:Loc Command_Movement}">
                                    <MenuItem Command="EditingCommands.MoveLeftByWord"
                                              Header="{le:Loc Command_MoveLeftByWord}"
                                              InputGestureText="Ctrl+Left"/>
                                    <MenuItem Command="EditingCommands.MoveRightByWord"
                                              Header="{le:Loc Command_MoveRightByWord}"
                                              InputGestureText="Ctrl+Right"/>
                                    <MenuItem Command="EditingCommands.MoveToLineStart"
                                              Header="{le:Loc Command_MoveToLineStart}"
                                              InputGestureText="Home"/>
                                    <MenuItem Command="EditingCommands.MoveToLineEnd"
                                              Header="{le:Loc Command_MoveToLineEnd}"
                                              InputGestureText="End"/>
                                    <MenuItem Command="EditingCommands.MoveUpByPage"
                                              Header="{le:Loc Command_MoveUpByPage}"
                                              InputGestureText="PageUp"/>
                                    <MenuItem Command="EditingCommands.MoveDownByPage"
                                              Header="{le:Loc Command_MoveDownByPage}"
                                              InputGestureText="PageDown"/>
                                    <MenuItem Command="EditingCommands.MoveToDocumentStart"
                                              Header="{le:Loc Command_MoveToDocumentStart}"
                                              InputGestureText="Ctrl+Home"/>
                                    <MenuItem Command="EditingCommands.MoveToDocumentEnd"
                                              Header="{le:Loc Command_MoveToDocumentEnd}"
                                              InputGestureText="Ctrl+End"/>
                                </MenuItem>
                                <MenuItem Header="{le:Loc Command_Selection}">
                                    <MenuItem Command="EditingCommands.SelectLeftByWord"
                                              Header="{le:Loc Command_SelectLeftByWord}"
                                              InputGestureText="Ctrl+Shift+Left"/>
                                    <MenuItem Command="EditingCommands.SelectRightByWord"
                                              Header="{le:Loc Command_SelectRightByWord}"
                                              InputGestureText="Ctrl+Shift+Right"/>
                                    <MenuItem Command="EditingCommands.SelectToLineStart"
                                              Header="{le:Loc Command_SelectToLineStart}"
                                              InputGestureText="Shift+Home"/>
                                    <MenuItem Command="EditingCommands.SelectToLineEnd"
                                              Header="{le:Loc Command_SelectToLineEnd}"
                                              InputGestureText="Shift+End"/>
                                    <MenuItem Command="EditingCommands.SelectUpByPage"
                                              Header="{le:Loc Command_SelectUpByPage}"
                                              InputGestureText="Shift+PageUp"/>
                                    <MenuItem Command="EditingCommands.SelectDownByPage"
                                              Header="{le:Loc Command_SelectDownByPage}"
                                              InputGestureText="Shift+PageDown"/>
                                    <MenuItem Command="EditingCommands.SelectToDocumentStart"
                                              Header="{le:Loc Command_SelectToDocumentStart}"
                                              InputGestureText="Ctrl+Shift+Home"/>
                                    <MenuItem Command="EditingCommands.SelectToDocumentEnd"
                                              Header="{le:Loc Command_SelectToDocumentEnd}"
                                              InputGestureText="Ctrl+Shift+End"/>
                                </MenuItem>
                                <MenuItem Header="{le:Loc Command_Formatting}">
                                    <MenuItem Command="controls:TextEditorCommands.ConvertToNarrow"
                                              Header="{le:Loc Command_ConvertToNarrow}"/>
                                    <MenuItem Command="controls:TextEditorCommands.ConvertToWide"
                                              Header="{le:Loc Command_ConvertToWide}"/>
                                    <Separator/>
                                    <MenuItem Command="ae:AvalonEditCommands.ConvertToLowercase"
                                              Header="{le:Loc Command_ConvertToLowerCase}"/>
                                    <MenuItem Command="ae:AvalonEditCommands.ConvertToUppercase"
                                              Header="{le:Loc Command_ConvertToUpperCase}"/>
                                    <MenuItem Command="ae:AvalonEditCommands.ConvertToTitleCase"
                                              Header="{le:Loc Command_ConvertToTitleCase}"/>
                                    <Separator/>
                                    <MenuItem Command="ae:AvalonEditCommands.ConvertTabsToSpaces"
                                              Header="{le:Loc Command_ConvertTabsToSpaces}"/>
                                    <MenuItem Command="ae:AvalonEditCommands.ConvertSpacesToTabs"
                                              Header="{le:Loc Command_ConvertSpacesToTabs}"/>
                                </MenuItem>
                            </ContextMenu>
                        </controls:TextEditor.ContextMenu>
                    </controls:TextEditor>
                </DataTemplate>
            </dr:TabablzControl.ContentTemplate>
        </controls:DraggableTabControl>

        <Border Grid.RowSpan="3" d:IsHidden="True" Style="{StaticResource App.Overlay}" Visibility="{qc:Binding '$P ? Visibility.Visible : Visibility.Collapsed', P={Binding IsWorking.Value, Mode=OneWay}}">
            <StackPanel Margin="5 0" HorizontalAlignment="Stretch" VerticalAlignment="Center">
                <TextBlock Text="{le:Loc Text_Working}" HorizontalAlignment="Center" TextAlignment="Center"/>
                <Border Height="10"/>
                <m:ProgressRing/>
            </StackPanel>
        </Border>
    </Grid>

</m:MetroWindow>
