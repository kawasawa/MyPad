<m:MetroWindow x:Class="MyPad.Views.MainWindow"
               xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
               xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
               xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
               xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
               xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
               xmlns:p="http://prismlibrary.com/"
               xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
               xmlns:m="http://metro.mahapps.com/winfx/xaml/controls"
               xmlns:mi="http://metro.mahapps.com/winfx/xaml/iconpacks"
               xmlns:le="http://wpflocalizeextension.codeplex.com"
               xmlns:qc="http://QuickConverter.CodePlex.com/"
               xmlns:ge="clr-namespace:SourceChord.GridExtra;assembly=GridExtra.Wpf"
               xmlns:pb="clr-namespace:WinCopies.Util.Data;assembly=WinCopies.Util.Desktop"
               xmlns:dr="clr-namespace:Dragablz;assembly=Dragablz"
               xmlns:ae="http://icsharpcode.net/sharpdevelop/avalonedit"
               xmlns:s="clr-namespace:System;assembly=System.Runtime"
               xmlns:viewModels="clr-namespace:MyPad.ViewModels"
               xmlns:views="clr-namespace:MyPad.Views"
               xmlns:behaviors="clr-namespace:MyPad.Views.Behaviors"
               xmlns:controls="clr-namespace:MyPad.Views.Controls"
               xmlns:helpers="clr-namespace:MyPad.Views.Helpers"
               mc:Ignorable="d"
               p:ViewModelLocator.AutoWireViewModel="True"
               Style="{StaticResource App.Window}"
               Title="{qc:MultiBinding '($P0 ? $P1 : Path.GetFileName($P1)) + ($P2 ? \'*\' : null) + \' \- \' + $P3',
                       P0={Binding Settings.System.ShowFullName, Mode=OneWay},
                       P1={Binding ActiveTextEditor.Value.FileName, Mode=OneWay},
                       P2={Binding ActiveTextEditor.Value.IsModified, Mode=OneWay},
                       P3={Binding ProductInfo.Product, Mode=OneWay}}"
               Cursor="{qc:Binding '$P ? Cursors.Wait : Cursors.Arrow', P={Binding IsWorking.Value, Mode=TwoWay}}"
               ResizeMode="{qc:Binding '$P ? ResizeMode.CanResizeWithGrip : ResizeMode.CanResize', P={Binding Settings.System.ShowStatusBar, Mode=TwoWay}}" 
               Height="525" Width="850" WindowStartupLocation="CenterScreen" AllowDrop="True"
               Loaded="Window_Loaded" Closing="Window_Closing" Closed="Window_Closed" DataContextChanged="Window_DataContextChanged">

    <!-- リソース -->
    <Window.Resources>
        <Style x:Key="RegionContent" TargetType="{x:Type ContentControl}">
            <Setter Property="p:RegionManager.RegionManager" Value="{Binding RegionManager, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}"/>
            <Setter Property="Focusable" Value="False"/>
        </Style>
        <Style TargetType="{x:Type m:Flyout}" BasedOn="{StaticResource Default.Flyout}">
            <EventSetter Event="IsOpenChanged" Handler="Flyout_IsOpenChanged"/>
            <Setter Property="Position" Value="Left"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="IsModal" Value="True"/>
            <Setter Property="CloseButtonIsCancel" Value="True"/>
        </Style>
        <ContextMenu x:Key="ContextMenu">
            <MenuItem IsCheckable="True" IsChecked="{Binding Settings.System.ShowMenuBar,   Mode=TwoWay}" Header="{le:Loc Command_ShowMenuBar}"/>
            <MenuItem IsCheckable="True" IsChecked="{Binding Settings.System.ShowToolBar,   Mode=TwoWay}" Header="{le:Loc Command_ShowToolBar}"/>
            <MenuItem IsCheckable="True" IsChecked="{Binding Settings.System.ShowSideBar,   Mode=TwoWay}" Header="{le:Loc Command_ShowSideBar}"/>
            <MenuItem IsCheckable="True" IsChecked="{Binding Settings.System.ShowStatusBar, Mode=TwoWay}" Header="{le:Loc Command_ShowStatusBar}"/>
        </ContextMenu>
    </Window.Resources>

    <!-- イベントトリガー -->
    <i:Interaction.Triggers>
        <l:InteractionMessageTrigger MessageKey="Activate" Messenger="{Binding Messenger, Mode=OneWay}">
            <behaviors:WindowActivateAction/>
        </l:InteractionMessageTrigger>
        <l:InteractionMessageTrigger MessageKey="ScrollToCaret" Messenger="{Binding Messenger, Mode=OneWay}">
            <i:CallMethodAction MethodName="ScrollToCaret" TargetObject="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}"/>
        </l:InteractionMessageTrigger>
        <i:EventTrigger EventName="Drop">
            <behaviors:WindowActivateAction/>
            <i:InvokeCommandAction Command="{Binding DropHandler, Mode=OneTime}" PassEventArgsToCommand="True"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="ContentRendered">
            <i:InvokeCommandAction Command="{Binding ContentRenderedHandler, Mode=OneTime}" PassEventArgsToCommand="True"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="Closing">
            <i:InvokeCommandAction Command="{Binding ClosingHandler, Mode=OneTime}" PassEventArgsToCommand="True"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <!-- 入力バインディング -->
    <Window.InputBindings>
        <KeyBinding Command="{Binding NewCommand,                  Mode=OneTime}" Key="N"        Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding NewWindowCommand,            Mode=OneTime}" Key="N"        Modifiers="Ctrl+Shift"/>
        <KeyBinding Command="{Binding OpenCommand,                 Mode=OneTime}" Key="O"        Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding SaveCommand,                 Mode=OneTime}" Key="S"        Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding SaveAsCommand,               Mode=OneTime}" Key="S"        Modifiers="Ctrl+Shift"/>
        <KeyBinding Command="{Binding SaveAllCommand,              Mode=OneTime}" Key="K"        Modifiers="Ctrl+Shift"/>
        <KeyBinding Command="{Binding ExitApplicationCommand,      Mode=OneTime}" Key="F4"       Modifiers="Ctrl+Alt"/>
        <KeyBinding Command="{Binding CloseCommand,                Mode=OneTime}" Key="F4"       Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding CloseCommand,                Mode=OneTime}" Key="W"        Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding CloseAllCommand,             Mode=OneTime}" Key="F4"       Modifiers="Ctrl+Shift"/>
        <KeyBinding Command="{Binding CloseAllCommand,             Mode=OneTime}" Key="W"        Modifiers="Ctrl+Shift"/>
        <KeyBinding Command="{Binding CloseOtherCommand,           Mode=OneTime}" Key="F4"       Modifiers="Shift"/>
        <KeyBinding Command="{Binding PrintCommand,                Mode=OneTime}" Key="P"        Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding PrintPreviewCommand,         Mode=OneTime}" Key="P"        Modifiers="Ctrl+Shift"/>
        <KeyBinding Command="{Binding OptionCommand,               Mode=OneTime}" Key="OemComma" Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding MaintenanceCommand,          Mode=OneTime}" Key="OemComma" Modifiers="Ctrl+Shift"/>
        <KeyBinding Command="{Binding AboutCommand,                Mode=OneTime}" Key="F1"       Modifiers="Ctrl+Shift"/>
        <KeyBinding Command="{Binding GoToLineCommand,             Mode=OneTime}" Key="G"        Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding ChangeEncodingCommand,       Mode=OneTime}" Key="E"        Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding ChangeSyntaxCommand,         Mode=OneTime}" Key="M"        Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding DiffCommand,                 Mode=OneTime}" Key="D"        Modifiers="Ctrl"/>
        <KeyBinding Command="{Binding DiffUnmodifiedCommand,       Mode=OneTime}" Key="D"        Modifiers="Ctrl+Shift"/>
        <KeyBinding Command="{Binding SwitchFullScreenModeCommand, Mode=OneTime, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Key="F11"/>
    </Window.InputBindings>

    <!-- ウィンドウコマンド(右) -->
    <m:MetroWindow.RightWindowCommands>
        <m:WindowCommands>
            <ToggleButton IsChecked="{Binding Topmost, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=TwoWay}" ToolTip="{le:Loc Command_Topmost}" Focusable="False">
                <mi:PackIconModern Kind="Pin" Foreground="{DynamicResource MahApps.Brushes.ThemeForeground}">
                    <mi:PackIconModern.Resources>
                        <Style TargetType="{x:Type mi:PackIconModern}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Topmost, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}" Value="True">
                                    <Setter Property="RenderTransform">
                                        <Setter.Value>
                                            <RotateTransform Angle="-45" CenterX="7" CenterY="7"/>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </mi:PackIconModern.Resources>
                </mi:PackIconModern>
            </ToggleButton>
            <Button Command="{Binding SwitchFullScreenModeCommand, Mode=OneTime, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" ToolTip="{le:Loc Command_SwitchFullScreenMode}" Focusable="False">
                <mi:PackIconModern Kind="Fullscreen" Foreground="{DynamicResource MahApps.Brushes.ThemeForeground}"/>
            </Button>
        </m:WindowCommands>
    </m:MetroWindow.RightWindowCommands>

    <!-- ウィンドウコマンド(左) -->
    <m:MetroWindow.LeftWindowCommands>
        <m:WindowCommands Margin="0 2 0 0">
            <ContentControl Style="{StaticResource RegionContent}" p:RegionManager.RegionName="MenuBarRegion1"
                            Visibility="{qc:Binding '$P ? Visibility.Visible : Visibility.Collapsed', P={Binding Settings.System.ShowMenuBar, Mode=OneWay}}"/>
        </m:WindowCommands>
    </m:MetroWindow.LeftWindowCommands>

    <!-- フライアウト -->
    <m:MetroWindow.Flyouts>
        <m:FlyoutsControl>
            <m:Flyout Header="{le:Loc Command_Diff}" IsOpen="{Binding IsOpenDiffContent.Value, Mode=TwoWay}">
                <ContentControl Style="{StaticResource RegionContent}" p:RegionManager.RegionName="DiffContentRegion"/>
            </m:Flyout>
            <m:Flyout Header="{le:Loc Command_Print}" IsOpen="{Binding IsOpenPrintPreviewContent.Value, Mode=TwoWay}">
                <ContentControl Style="{StaticResource RegionContent}" p:RegionManager.RegionName="PrintPreviewContentRegion"/>
            </m:Flyout>
            <m:Flyout Header="{le:Loc Command_Option}" IsOpen="{Binding IsOpenOptionContent.Value, Mode=TwoWay}">
                <ContentControl Style="{StaticResource RegionContent}" p:RegionManager.RegionName="OptionContentRegion"/>
            </m:Flyout>
            <m:Flyout Header="{le:Loc Command_Maintenance}" IsOpen="{Binding IsOpenMaintenanceContent.Value, Mode=TwoWay}">
                <ContentControl Style="{StaticResource RegionContent}" p:RegionManager.RegionName="MaintenanceContentRegion"/>
            </m:Flyout>
            <m:Flyout Header="{le:Loc Command_About}" IsOpen="{Binding IsOpenAboutContent.Value, Mode=TwoWay}">
                <ContentControl Style="{StaticResource RegionContent}" p:RegionManager.RegionName="AboutContentRegion"/>
            </m:Flyout>
        </m:FlyoutsControl>
    </m:MetroWindow.Flyouts>

    <!-- 画面コンテンツ -->
    <Grid ge:GridEx.RowDefinition="Auto, Auto, *, Auto">
        <ContentControl Grid.Row="0" Style="{StaticResource RegionContent}" p:RegionManager.RegionName="MenuBarRegion2"
                        Visibility="{qc:MultiBinding '!$P0 ## $P1 ? Visibility.Visible : Visibility.Collapsed',
                                     P0={Binding ShowTitleBar, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type Window}}},
                                     P1={Binding Settings.System.ShowMenuBar, Mode=OneWay}}"
                        ContextMenu="{StaticResource ContextMenu}"/>
        <ContentControl Grid.Row="1" Style="{StaticResource RegionContent}" p:RegionManager.RegionName="ToolBarRegion"
                        Visibility="{qc:Binding '$P ? Visibility.Visible : Visibility.Collapsed', P={Binding Settings.System.ShowToolBar, Mode=OneWay}}"
                        ContextMenu="{StaticResource ContextMenu}"/>
        <ContentControl Grid.Row="3" Style="{StaticResource RegionContent}" p:RegionManager.RegionName="StatusBarRegion"
                        Visibility="{qc:Binding '$P ? Visibility.Visible : Visibility.Collapsed', P={Binding Settings.System.ShowStatusBar, Mode=OneWay}}"
                        ContextMenu="{StaticResource ContextMenu}"/>

        <Button Grid.Row="0" Command="{Binding SwitchFullScreenModeCommand, Mode=OneTime, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" ToolTip="{le:Loc Command_SwitchFullScreenMode}" Focusable="False"
                Style="{DynamicResource Common.ChromelessButton}" Padding="10 5" VerticalAlignment="Top" HorizontalAlignment="Right"
                Visibility="{qc:MultiBinding '!$P0 ## $P1 ? Visibility.Visible : Visibility.Collapsed',
                             P0={Binding ShowTitleBar, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type Window}}},
                             P1={Binding Settings.System.ShowMenuBar, Mode=OneWay}}">
            <mi:PackIconModern Kind="Fullscreen" Foreground="{DynamicResource MahApps.Brushes.ThemeForeground}"/>
        </Button>
        <Button Grid.Row="1" Command="{Binding SwitchFullScreenModeCommand, Mode=OneTime, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" ToolTip="{le:Loc Command_SwitchFullScreenMode}" Focusable="False"
                Style="{DynamicResource Common.ChromelessButton}" Padding="10 5" VerticalAlignment="Top" HorizontalAlignment="Right"
                Visibility="{qc:MultiBinding '!$P0 ## !$P1 ## $P2 ? Visibility.Visible : Visibility.Collapsed',
                             P0={Binding ShowTitleBar, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type Window}}},
                             P1={Binding Settings.System.ShowMenuBar, Mode=OneWay},
                             P2={Binding Settings.System.ShowToolBar, Mode=OneWay}}">
            <mi:PackIconModern Kind="Fullscreen" Foreground="{DynamicResource MahApps.Brushes.ThemeForeground}"/>
        </Button>

        <Grid Grid.Row="2">
            <Grid.Resources>
                <s:Double x:Key="HamburgerWidth">48</s:Double>
                <GridLength x:Key="HamburgerColumnWidth">48</GridLength>
                <helpers:BindingProxy x:Key="Proxy" Data="{Binding Mode=OneWay}"/>
            </Grid.Resources>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" x:Name="SideContentColumn"
                                  MinWidth="{qc:MultiBinding '$P0 ? $P1 : 0', P0={Binding Settings.System.ShowSideBar, Mode=OneWay}, P1={Binding Source={StaticResource HamburgerWidth}}}"
                                  MaxWidth="{qc:MultiBinding '$P0 - $P1', P0={Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}, P1={Binding Source={StaticResource HamburgerWidth}}}"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*" x:Name="MainContentColumn"/>
            </Grid.ColumnDefinitions>

            <Grid.RowDefinitions>
                <RowDefinition Height="*" MinHeight="50"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto" x:Name="BottomContentRow"/>
            </Grid.RowDefinitions>

            <m:HamburgerMenu Grid.Column="0" Grid.RowSpan="3" x:Name="SideContent"
                             Width="{StaticResource HamburgerWidth}"
                             HamburgerWidth="{StaticResource HamburgerWidth}"
                             HamburgerVisibility="Collapsed"
                             Visibility="{qc:Binding '$P ? Visibility.Visible : Visibility.Collapsed', P={Binding Settings.System.ShowSideBar, Mode=OneWay}}"
                             IsTabStop="False"
                             ContextMenu="{StaticResource ContextMenu}"
                             IsVisibleChanged="SideContent_IsVisibleChanged"
                             ItemInvoked="SideContent_ItemInvoked">
                <i:Interaction.Triggers>
                    <i:PropertyChangedTrigger Binding="{Binding Visibility, ElementName=HamburgerMenu, Mode=OneWay}">
                        <i:ChangePropertyAction TargetName="SideContentColumn" PropertyName="Width" Value="Auto"/>
                    </i:PropertyChangedTrigger>
                </i:Interaction.Triggers>
                <m:HamburgerMenu.ItemTemplate>
                    <DataTemplate DataType="{x:Type m:HamburgerMenuIconItem}">
                        <Grid Height="{StaticResource HamburgerWidth}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{StaticResource HamburgerColumnWidth}"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Border ToolTip="{Binding Label, Mode=OneWay}" Background="{qc:MultiBinding '$P0 == $P1 ? new SolidColorBrush(Color.FromArgb((byte)204, (byte)0, (byte)120, (byte)215)) : Brushes.Transparent', P0={Binding Mode=OneWay}, P1={Binding Content, ElementName=SideContent, Mode=OneWay}}">
                                <ContentControl Content="{Binding Icon, Mode=OneWay}" HorizontalAlignment="Center" VerticalAlignment="Center" IsTabStop="False" Focusable="False"/>
                            </Border>
                        </Grid>
                    </DataTemplate>
                </m:HamburgerMenu.ItemTemplate>
                <m:HamburgerMenu.OptionsItemTemplate>
                    <DataTemplate DataType="{x:Type m:HamburgerMenuIconItem}">
                        <Grid Height="{StaticResource HamburgerWidth}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{StaticResource HamburgerColumnWidth}"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Border ToolTip="{Binding Label, Mode=OneWay}" Background="Transparent">
                                <ContentControl Content="{Binding Icon, Mode=OneWay}" HorizontalAlignment="Center" VerticalAlignment="Center" IsTabStop="False" Focusable="False"/>
                            </Border>
                        </Grid>
                    </DataTemplate>
                </m:HamburgerMenu.OptionsItemTemplate>
                <m:HamburgerMenu.ContentTemplate>
                    <DataTemplate DataType="{x:Type m:HamburgerMenuIconItem}">
                        <Grid ge:GridEx.RowDefinition="10, Auto, 10, *" Width="{qc:MultiBinding '$P0 - $P1', P0={Binding ActualWidth, ElementName=HamburgerMenu, Mode=OneWay}, P1={Binding Source={StaticResource HamburgerWidth}}}">
                            <Grid.ContextMenu>
                                <ContextMenu/>
                            </Grid.ContextMenu>
                            <TextBlock      Grid.Row="1" Margin="3 0" Text="{Binding Label, Mode=OneWay}" FontSize="14"/>
                            <ContentControl Grid.Row="3" Margin="3 0" Content="{Binding Tag, Mode=OneWay}" IsTabStop="False" Focusable="False"/>
                        </Grid>
                    </DataTemplate>
                </m:HamburgerMenu.ContentTemplate>
                <m:HamburgerMenu.ItemsSource>
                    <m:HamburgerMenuItemCollection>
                        <m:HamburgerMenuIconItem x:Name="FileExplorerItem" Label="{le:Loc Command_Explorer}">
                            <m:HamburgerMenuIconItem.Icon>
                                <mi:Material Kind="FileTree"/>
                            </m:HamburgerMenuIconItem.Icon>
                            <m:HamburgerMenuIconItem.Tag>
                                <TreeView ItemsSource="{Binding Data.FileExplorer.Value.FileTreeNodes, Source={StaticResource Proxy}, Mode=OneWay}">
                                    <TreeView.ItemContainerStyle>
                                        <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource Default.TreeViewItem}">
                                            <EventSetter Event="MouseRightButtonDown" Handler="FileTreeNode_MouseRightButtonDown"/>
                                            <EventSetter Event="MouseDoubleClick" Handler="FileTreeNode_MouseDoubleClick"/>
                                            <EventSetter Event="KeyDown" Handler="FileTreeNode_KeyDown"/>
                                            <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
                                            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                                            <Setter Property="ContextMenu">
                                                <Setter.Value>
                                                    <ContextMenu>
                                                        <MenuItem Click="{qc:QuickEvent 'Clipboard.SetText($dataContext.FileName)'}" Header="{le:Loc Command_CopyFullPath}">
                                                            <MenuItem.Icon>
                                                                <mi:Modern Kind="ClipboardVariantText"/>
                                                            </MenuItem.Icon>
                                                        </MenuItem>
                                                        <MenuItem Header="{le:Loc Command_OpenWithExplorer}">
                                                            <i:Interaction.Triggers>
                                                                <i:EventTrigger EventName="Click">
                                                                    <behaviors:ProcessStartAction
                                                                        FileName="explorer.exe"
                                                                        Arguments="{qc:Binding '$P.IsEmpty ? $P.Parent.FileName : ($P.IsDirectory ? $P.FileName : (\'/select, \' + $P.FileName))', P={Binding Mode=OneWay}}"/>
                                                                </i:EventTrigger>
                                                            </i:Interaction.Triggers>
                                                            <MenuItem.Icon>
                                                                <mi:Material Kind="FolderOutline"/>
                                                            </MenuItem.Icon>
                                                        </MenuItem>
                                                        <MenuItem Command="{Binding PropertyCommand, Mode=OneTime}" Header="{le:Loc Command_Property}" IsEnabled="{qc:Binding '!$P', P={Binding IsEmpty, Mode=OneWay}}">
                                                            <MenuItem.Icon>
                                                                <mi:FontAwesome Kind="WrenchSolid"/>
                                                            </MenuItem.Icon>
                                                        </MenuItem>
                                                    </ContextMenu>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsEmpty, Mode=OneWay}" Value="True">
                                                    <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.Gray5}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsHidden, Mode=OneWay}" Value="True">
                                                    <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.Gray5}"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TreeView.ItemContainerStyle>
                                    <TreeView.ItemTemplate>
                                        <HierarchicalDataTemplate ItemsSource="{Binding Children, Mode=OneWay}" DataType="{x:Type viewModels:FileExplorerViewModel+FileTreeNode}">
                                            <Border Background="Transparent" ToolTip="{Binding FileName, Mode=OneWay}" ToolTipService.IsEnabled="{qc:Binding '!$P', P={Binding IsEmpty, Mode=OneWay}}">
                                                <StackPanel Orientation="Horizontal">
                                                    <Image Source="{Binding Image, Mode=OneWay}" Opacity="{qc:Binding '$P ? 0.5 : 1.0', P={Binding IsHidden, Mode=OneWay}}" Height="20" Margin="0 0 3 0"/>
                                                    <TextBlock Text="{qc:MultiBinding '$P0 ? \'empty\' : Path.GetFileName($P1)', P0={Binding IsEmpty, Mode=OneWay}, P1={Binding FileName, Mode=OneWay}}" VerticalAlignment="Center"/>
                                                </StackPanel>
                                            </Border>
                                        </HierarchicalDataTemplate>
                                    </TreeView.ItemTemplate>
                                </TreeView>
                            </m:HamburgerMenuIconItem.Tag>
                        </m:HamburgerMenuIconItem>
                        <m:HamburgerMenuIconItem x:Name="PropertyItem" Label="{le:Loc Command_Property}">
                            <m:HamburgerMenuIconItem.Icon>
                                <mi:Material Kind="FileOutline"/>
                            </m:HamburgerMenuIconItem.Icon>
                            <m:HamburgerMenuIconItem.Tag>
                                <ScrollViewer VerticalScrollBarVisibility="Auto">
                                    <ge:ResponsiveGrid DataContext="{Binding Data.ActiveTextEditor.Value, Source={StaticResource Proxy}, Mode=OneWay}">
                                        <ge:ResponsiveGrid.Resources>
                                            <Style TargetType="{x:Type Label}" BasedOn="{StaticResource Default.Label}">
                                                <Setter Property="FontSize" Value="14"/>
                                            </Style>
                                            <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource Default.TextBlock}">
                                                <Setter Property="Margin" Value="20 0 0 5"/>
                                                <Setter Property="TextWrapping" Value="Wrap"/>
                                            </Style>
                                        </ge:ResponsiveGrid.Resources>

                                        <StackPanel ge:ResponsiveGrid.XS="12" ge:ResponsiveGrid.SM="6" Margin="5 0">
                                            <StackPanel Orientation="Horizontal">
                                                <Label  Content="{le:Loc Label_Name}"/>
                                                <Border Width="10"/>
                                                <Button Click="{qc:QuickEvent 'Clipboard.SetText($dataContext.FileName)'}"
                                                        Style="{StaticResource Common.ChromelessButton}"
                                                        ToolTip="{le:Loc Command_CopyFullPath}">
                                                    <mi:Modern Kind="ClipboardVariantText"/>
                                                </Button>
                                            </StackPanel>
                                            <TextBlock Text="{qc:Binding 'Path.GetFileName($P)', P={Binding FileName, Mode=OneWay}}"/>
                                            <Label     Content="{le:Loc Label_Type}"/>
                                            <TextBlock Text="{Binding FileType, Mode=OneWay}"/>
                                            <Label     Content="{le:Loc Label_Location}"/>
                                            <TextBlock Text="{Binding FileInfo.DirectoryName, Mode=OneWay}"/>
                                            <Label     Content="{le:Loc Label_Size}"/>
                                            <TextBlock Text="{Binding FileInfo.Length, StringFormat={}{0:N0} bytes, Mode=OneWay}"/>
                                        </StackPanel>

                                        <StackPanel ge:ResponsiveGrid.XS="12" ge:ResponsiveGrid.SM="6" Margin="5 0">
                                            <Label     Content="{le:Loc Label_CreationDate}"/>
                                            <TextBlock Text="{Binding FileInfo.CreationTime, StringFormat=yyyy/MM/dd HH:mm:ss, Mode=OneWay}"/>
                                            <Label     Content="{le:Loc Label_ModifiredDate}"/>
                                            <TextBlock Text="{Binding FileInfo.LastWriteTime, StringFormat=yyyy/MM/dd HH:mm:ss, Mode=OneWay}"/>
                                            <Label     Content="{le:Loc Label_AccessDate}"/>
                                            <TextBlock Text="{Binding FileInfo.LastAccessTime, StringFormat=yyyy/MM/dd HH:mm:ss, Mode=OneWay}"/>
                                            <Label     Content="{le:Loc Label_Attributes}"/>
                                            <TextBlock Text="{Binding FileInfo.Attributes, Mode=OneWay}"/>
                                            <Label     Content="{le:Loc Label_Owner}"/>
                                            <TextBlock Text="{Binding FileOwner, Mode=OneWay}"/>
                                        </StackPanel>
                                    </ge:ResponsiveGrid>
                                </ScrollViewer>
                            </m:HamburgerMenuIconItem.Tag>
                        </m:HamburgerMenuIconItem>
                    </m:HamburgerMenuItemCollection>
                </m:HamburgerMenu.ItemsSource>
                <m:HamburgerMenu.OptionsItemsSource>
                    <m:HamburgerMenuItemCollection>
                        <m:HamburgerMenuIconItem Label="{le:Loc Command_Option}" Command="{Binding Data.OptionCommand, Source={StaticResource Proxy}, Mode=OneTime}">
                            <m:HamburgerMenuIconItem.Icon>
                                <mi:Modern Kind="Cog"/>
                            </m:HamburgerMenuIconItem.Icon>
                        </m:HamburgerMenuIconItem>
                    </m:HamburgerMenuItemCollection>
                </m:HamburgerMenu.OptionsItemsSource>
            </m:HamburgerMenu>

            <GridSplitter Grid.Column="1" Grid.RowSpan="3"
                          Width="{qc:MultiBinding '$P0 == Visibility.Visible ## double.IsNaN($P1) ? 5 : 0',
                                 P0={Binding Visibility, ElementName=SideContent, Mode=OneWay},
                                 P1={Binding Width, ElementName=SideContent, Mode=OneWay}}"
                          DragCompleted="ColumnSplitter_DragCompleted"/>

            <controls:DraggableTabControl Grid.Column="2" Grid.Row="0" x:Name="MainContent"
                                          ItemsSource="{Binding TextEditors, Mode=OneWay}"
                                          SelectedItem="{Binding ActiveTextEditor.Value, Mode=TwoWay}"
                                          NewItemFactory="{Binding TextEditorFactory, Mode=OneTime}"
                                          ClosingItemCallback="{Binding ClosingTextEditorHandler, Mode=OneTime}"
                                          IsHeaderPanelVisible="{qc:MultiBinding '$P0 || $P1.CompareTo(1) == 1', P0={Binding Settings.System.ShowSingleTab, Mode=OneWay}, P1={Binding Items.Count, RelativeSource={RelativeSource Self}, Mode=OneWay}}"
                                          ShowDefaultAddButton="False"
                                          ShowDefaultCloseButton="True"
                                          SelectionChanged="DraggableTabControl_SelectionChanged">
                <dr:TabablzControl.InterTabController>
                    <dr:InterTabController InterTabClient="{Binding InterTabClient, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}"/>
                </dr:TabablzControl.InterTabController>
                <dr:TabablzControl.HeaderSuffixContent>
                    <Grid ge:GridEx.ColumnDefinition="Auto, *" Margin="5 0 0 0">
                        <Grid.ContextMenu>
                            <ContextMenu>
                                <MenuItem Command="{Binding NewCommand, Mode=OneTime}" Header="{le:Loc Command_New}" InputGestureText="Ctrl+N">
                                    <MenuItem.Icon>
                                        <mi:Modern Kind="PageNew"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Command="{Binding SaveAllCommand, Mode=OneTime}" Header="{le:Loc Command_SaveAll}" InputGestureText="Ctrl+Shift+K">
                                    <MenuItem.Icon>
                                        <mi:Material Kind="ContentSaveAll"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Command="{Binding CloseAllCommand, Mode=OneTime}" Header="{le:Loc Command_CloseAll}" InputGestureText="Ctrl+Shift+F4">
                                    <MenuItem.Icon>
                                        <mi:Material Kind="LayersOff"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                            </ContextMenu>
                        </Grid.ContextMenu>
                        <Button Grid.Column="0" Command="{x:Static dr:TabablzControl.AddItemCommand}" ToolTip="{le:Loc Command_New}" Height="20" Width="20" Padding="0" Background="Transparent" BorderBrush="Transparent" Focusable="False">
                            <mi:PackIconMaterial Kind="Plus" Height="12" Width="12" Foreground="{DynamicResource MahApps.Brushes.Gray5}"/>
                        </Button>
                        <Border Grid.Column="1" VerticalAlignment="Stretch" Background="Transparent"/>
                    </Grid>
                </dr:TabablzControl.HeaderSuffixContent>
                <dr:TabablzControl.HeaderItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <Image Source="{Binding FileIcon, Mode=OneWay}" Height="15" Margin="0 0 5 0" Visibility="{qc:MultiBinding '$P0 != null ## $P1 ? Visibility.Visible : Visibility.Collapsed', P0={Binding FileIcon, Mode=OneWay}, P1={Binding DataContext.Settings.System.ShowFileIcon, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}}"/>
                            <TextBlock DataContext="{Binding Mode=OneWay}" Text="{qc:MultiBinding 'string.Concat(Path.GetFileName($P0), $P1 ? \'*\' : null)', P0={Binding FileName, Mode=OneWay}, P1={Binding IsModified, Mode=OneWay}}" VerticalAlignment="Center"/>
                        </StackPanel>
                    </DataTemplate>
                </dr:TabablzControl.HeaderItemTemplate>
                <dr:TabablzControl.ItemContainerStyle>
                    <Style TargetType="{x:Type dr:DragablzItem}" BasedOn="{StaticResource Default.DragablzItem}">
                        <EventSetter Event="MouseRightButtonDown" Handler="DragablzItem_MouseRightButtonDown"/>
                        <Setter Property="ToolTipService.IsEnabled" Value="{qc:Binding '!$P', P={Binding IsNewFile, Mode=OneWay}}"/>
                        <Setter Property="ToolTip" Value="{qc:MultiBinding '($P0 ? \'[R/O] \' : null) + $P1', P0={Binding IsReadOnly, Mode=OneWay}, P1={Binding FileName, Mode=OneWay}}"/>
                        <Style.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsReadOnly, Mode=OneWay}" Value="True"/>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" Value="{DynamicResource RedColorBrush}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsReadOnly, Mode=OneWay}" Value="True"/>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" Value="{DynamicResource RedColorBrush}"/>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </dr:TabablzControl.ItemContainerStyle>
                <dr:TabablzControl.ContextMenu>
                    <ContextMenu>
                        <MenuItem Command="{Binding CloseCommand, Mode=OneTime}" Header="{le:Loc Command_Close}" InputGestureText="Ctrl+F4">
                            <MenuItem.Icon>
                                <mi:Material Kind="Close"/>
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Command="{Binding CloseAllCommand, Mode=OneTime}" Header="{le:Loc Command_CloseAll}" InputGestureText="Ctrl+Shift+F4">
                            <MenuItem.Icon>
                                <mi:Material Kind="LayersOff"/>
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Command="{Binding CloseOtherCommand, Mode=OneTime}" Header="{le:Loc Command_CloseOther}" InputGestureText="Shift+F4">
                            <MenuItem.Icon>
                                <mi:Material Kind="LayersRemove"/>
                            </MenuItem.Icon>
                        </MenuItem>
                        <Separator/>
                        <MenuItem Command="{Binding SaveCommand, Mode=OneTime}" Header="{le:Loc Command_Save}" InputGestureText="Ctrl+S">
                            <MenuItem.Icon>
                                <mi:Material Kind="ContentSave"/>
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Command="{Binding SaveAsCommand, Mode=OneTime}" Header="{le:Loc Command_SaveAs}" HeaderStringFormat="{}{0}..." InputGestureText="Ctrl+Shift+S">
                            <MenuItem.Icon>
                                <mi:Material Kind="ContentSaveSettings"/>
                            </MenuItem.Icon>
                        </MenuItem>
                        <Separator/>
                        <MenuItem Command="{Binding DiffUnmodifiedCommand, Mode=OneTime}" Header="{le:Loc Command_DiffUnmodified}" HeaderStringFormat="{}{0}..." InputGestureText="Ctrl+Shift+D">
                            <MenuItem.Icon>
                                <mi:Modern Kind="ListAdd"/>
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Header="{le:Loc Command_OpenParentDirectory}" IsEnabled="{qc:Binding '!$P', P={Binding ActiveTextEditor.Value.IsNewFile, Mode=OneWay}}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Click">
                                    <behaviors:ProcessStartAction FileName="explorer.exe" Arguments="{qc:Binding '\'/select, \' + $P', P={Binding ActiveTextEditor.Value.FileName, Mode=OneWay}}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                            <MenuItem.Icon>
                                <mi:Material Kind="FolderOpen"/>
                            </MenuItem.Icon>
                        </MenuItem>
                    </ContextMenu>
                </dr:TabablzControl.ContextMenu>
                <dr:TabablzControl.ContentTemplate>
                    <DataTemplate>
                        <controls:TextEditor x:Name="TextEditor">
                            <controls:TextEditor.Resources>
                                <Style TargetType="{x:Type ae:SearchPanel}" BasedOn="{StaticResource Default.SearchPanel}">
                                    <Setter Property="Localization" Value="{Binding Localization, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}"/>
                                </Style>
                            </controls:TextEditor.Resources>
                            <controls:TextEditor.Style>
                                <Style TargetType="{x:Type controls:TextEditor}" BasedOn="{StaticResource Default.TextEditor}">
                                    <EventSetter Event="Loaded" Handler="TextEditor_Loaded"/>
                                    <Setter Property="Settings"         Value="{Binding DataContext.Settings.TextEditor, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}"/>
                                    <Setter Property="Document"         Value="{Binding Document, Mode=OneWay}"/>
                                    <Setter Property="IsReadOnly"       Value="{Binding IsReadOnly, Mode=TwoWay}"/>
                                    <Setter Property="IsModified"       Value="{Binding IsModified, Mode=TwoWay}"/>
                                    <Setter Property="SyntaxDefinition" Value="{Binding SyntaxDefinition, Mode=TwoWay}"/>
                                    <Setter Property="OverstrikeMode"   Value="{Binding OverstrikeMode, Mode=TwoWay}"/>
                                    <Setter Property="Line"             Value="{Binding Line, Mode=TwoWay}"/>
                                    <Setter Property="Column"           Value="{Binding Column, Mode=TwoWay}"/>
                                    <Setter Property="VisualColumn"     Value="{Binding VisualColumn, Mode=TwoWay}"/>
                                    <Setter Property="pb:PushBindingManager.StylePushBindings">
                                        <Setter.Value>
                                            <pb:PushBindingCollection>
                                                <pb:PushBinding TargetProperty="ActualFontSize"       Path="ActualFontSize"/>
                                                <pb:PushBinding TargetProperty="ZoomIncrement"        Path="ZoomIncrement"/>
                                                <pb:PushBinding TargetProperty="VisualLength"         Path="VisualLength"/>
                                                <pb:PushBinding TargetProperty="TextLength"           Path="TextLength"/>
                                                <pb:PushBinding TargetProperty="SelectionLength"      Path="SelectionLength"/>
                                                <pb:PushBinding TargetProperty="SelectionStart"       Path="SelectionStart"/>
                                                <pb:PushBinding TargetProperty="SelectionEnd"         Path="SelectionEnd"/>
                                                <pb:PushBinding TargetProperty="SelectionStartLine"   Path="SelectionStartLine"/>
                                                <pb:PushBinding TargetProperty="SelectionEndLine"     Path="SelectionEndLine"/>
                                                <pb:PushBinding TargetProperty="SelectionLineCount"   Path="SelectionLineCount"/>
                                                <pb:PushBinding TargetProperty="SelectedText"         Path="SelectedText"/>
                                                <pb:PushBinding TargetProperty="CharName"             Path="CharName"/>
                                                <pb:PushBinding TargetProperty="IsAtEndOfLine"        Path="IsAtEndOfLine"/>
                                                <pb:PushBinding TargetProperty="IsInVirtualSpace"     Path="IsInVirtualSpace"/>
                                                <pb:PushBinding TargetProperty="EnableAutoCompletion" Path="EnableAutoCompletion"/>
                                            </pb:PushBindingCollection>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </controls:TextEditor.Style>
                            <controls:TextEditor.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Command="Undo"
                                              Header="{le:Loc Command_Undo}">
                                        <MenuItem.Icon>
                                            <mi:Modern Kind="UndoCurve"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem Command="Redo"
                                              Header="{le:Loc Command_Redo}">
                                        <MenuItem.Icon>
                                            <mi:Modern Kind="RedoCurve"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <Separator/>
                                    <MenuItem Command="Cut"
                                              Header="{le:Loc Command_Cut}">
                                        <MenuItem.Icon>
                                            <mi:Modern Kind="Scissor"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem Command="Copy"
                                              Header="{le:Loc Command_Copy}">
                                        <MenuItem.Icon>
                                            <mi:Modern Kind="PageCopy"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem Command="Paste"
                                              Header="{le:Loc Command_Paste}">
                                        <MenuItem.Icon>
                                            <mi:Modern Kind="ClipboardPaste"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem Command="EditingCommands.Delete"
                                              Header="{le:Loc Command_Delete}"
                                              InputGestureText="Del">
                                        <MenuItem.Icon>
                                            <mi:Material Kind="Eraser"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem Command="SelectAll"
                                              Header="{le:Loc Command_SelectAll}">
                                        <MenuItem.Icon>
                                            <mi:Modern Kind="CursorDefault"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <Separator/>
                                    <MenuItem Header="{le:Loc Command_Movement}">
                                        <MenuItem Command="EditingCommands.MoveLeftByWord"
                                                  Header="{le:Loc Command_MoveLeftByWord}"
                                                  InputGestureText="Ctrl+Left"/>
                                        <MenuItem Command="EditingCommands.MoveRightByWord"
                                                  Header="{le:Loc Command_MoveRightByWord}"
                                                  InputGestureText="Ctrl+Right"/>
                                        <MenuItem Command="EditingCommands.MoveToLineStart"
                                                  Header="{le:Loc Command_MoveToLineStart}"
                                                  InputGestureText="Home"/>
                                        <MenuItem Command="EditingCommands.MoveToLineEnd"
                                                  Header="{le:Loc Command_MoveToLineEnd}"
                                                  InputGestureText="End"/>
                                        <MenuItem Command="EditingCommands.MoveUpByPage"
                                                  Header="{le:Loc Command_MoveUpByPage}"
                                                  InputGestureText="PageUp"/>
                                        <MenuItem Command="EditingCommands.MoveDownByPage"
                                                  Header="{le:Loc Command_MoveDownByPage}"
                                                  InputGestureText="PageDown"/>
                                        <MenuItem Command="EditingCommands.MoveToDocumentStart"
                                                  Header="{le:Loc Command_MoveToDocumentStart}"
                                                  InputGestureText="Ctrl+Home"/>
                                        <MenuItem Command="EditingCommands.MoveToDocumentEnd"
                                                  Header="{le:Loc Command_MoveToDocumentEnd}"
                                                  InputGestureText="Ctrl+End"/>
                                    </MenuItem>
                                    <MenuItem Header="{le:Loc Command_Select}">
                                        <MenuItem Command="EditingCommands.SelectLeftByWord"
                                                  Header="{le:Loc Command_SelectLeftByWord}"
                                                  InputGestureText="Ctrl+Shift+Left"/>
                                        <MenuItem Command="EditingCommands.SelectRightByWord"
                                                  Header="{le:Loc Command_SelectRightByWord}"
                                                  InputGestureText="Ctrl+Shift+Right"/>
                                        <MenuItem Command="EditingCommands.SelectToLineStart"
                                                  Header="{le:Loc Command_SelectToLineStart}"
                                                  InputGestureText="Shift+Home"/>
                                        <MenuItem Command="EditingCommands.SelectToLineEnd"
                                                  Header="{le:Loc Command_SelectToLineEnd}"
                                                  InputGestureText="Shift+End"/>
                                        <MenuItem Command="EditingCommands.SelectUpByPage"
                                                  Header="{le:Loc Command_SelectUpByPage}"
                                                  InputGestureText="Shift+PageUp"/>
                                        <MenuItem Command="EditingCommands.SelectDownByPage"
                                                  Header="{le:Loc Command_SelectDownByPage}"
                                                  InputGestureText="Shift+PageDown"/>
                                        <MenuItem Command="EditingCommands.SelectToDocumentStart"
                                                  Header="{le:Loc Command_SelectToDocumentStart}"
                                                  InputGestureText="Ctrl+Shift+Home"/>
                                        <MenuItem Command="EditingCommands.SelectToDocumentEnd"
                                                  Header="{le:Loc Command_SelectToDocumentEnd}"
                                                  InputGestureText="Ctrl+Shift+End"/>
                                    </MenuItem>
                                    <MenuItem Header="{le:Loc Command_Formatting}">
                                        <MenuItem Command="controls:TextArea+Commands.ConvertToNarrow"
                                                  Header="{le:Loc Command_ConvertToNarrow}"/>
                                        <MenuItem Command="controls:TextArea+Commands.ConvertToWide"
                                                  Header="{le:Loc Command_ConvertToWide}"/>
                                        <Separator/>
                                        <MenuItem Command="ae:AvalonEditCommands.ConvertToLowercase"
                                                  Header="{le:Loc Command_ConvertToLowerCase}"/>
                                        <MenuItem Command="ae:AvalonEditCommands.ConvertToUppercase"
                                                  Header="{le:Loc Command_ConvertToUpperCase}"/>
                                        <MenuItem Command="ae:AvalonEditCommands.ConvertToTitleCase"
                                                  Header="{le:Loc Command_ConvertToTitleCase}"/>
                                        <Separator/>
                                        <MenuItem Command="ae:AvalonEditCommands.ConvertTabsToSpaces"
                                                  Header="{le:Loc Command_ConvertTabsToSpaces}"/>
                                        <MenuItem Command="ae:AvalonEditCommands.ConvertSpacesToTabs"
                                                  Header="{le:Loc Command_ConvertSpacesToTabs}"/>
                                    </MenuItem>
                                    <MenuItem Header="{le:Loc Command_Coding}">
                                        <MenuItem Command="controls:TextArea+Commands.Completion"
                                                  Header="{le:Loc Command_Completion}">
                                            <MenuItem.Icon>
                                                <mi:Material Kind="AutoFix"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <MenuItem Command="controls:TextArea+Commands.Folding"
                                                  Header="{le:Loc Command_Folding}"
                                                  InputGestureText="Ctrl+Shift+[">
                                            <MenuItem.Icon>
                                                <mi:Octicons Kind="Fold"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <MenuItem Command="controls:TextArea+Commands.Unfolding"
                                                  Header="{le:Loc Command_Unfolding}"
                                                  InputGestureText="Ctrl+Shift+]">
                                            <MenuItem.Icon>
                                                <mi:Octicons Kind="Unfold"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                    </MenuItem>
                                </ContextMenu>
                            </controls:TextEditor.ContextMenu>
                        </controls:TextEditor>
                    </DataTemplate>
                </dr:TabablzControl.ContentTemplate>
            </controls:DraggableTabControl>

            <GridSplitter Grid.Column="2" Grid.Row="1" Height="5"
                          Visibility="{qc:Binding '$P ? Visibility.Visible : Visibility.Collapsed', P={Binding IsVisibleBottomContent, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}}"
                          DragCompleted="RowSplitter_DragCompleted"/>

            <TabControl Grid.Column="2" Grid.Row="2" x:Name="BottomContent"
                        TabStripPlacement="Bottom" m:HeaderedControlHelper.HeaderFontWeight="Bold" m:HeaderedControlHelper.HeaderFontSize="10"
                        Visibility="{qc:Binding '$P ? Visibility.Visible : Visibility.Collapsed', P={Binding IsVisibleBottomContent, RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}}">
                <TabItem Header="{le:Loc Command_Terminal}">
                    <ContentControl Style="{StaticResource RegionContent}" p:RegionManager.RegionName="TerminalRegion"/>
                </TabItem>
                <TabItem Header="{le:Loc Command_ScriptRunner}">
                    <ContentControl Style="{StaticResource RegionContent}" p:RegionManager.RegionName="ScriptRunnerRegion"/>
                </TabItem>
            </TabControl>
        </Grid>

        <Border Grid.RowSpan="3" d:IsHidden="True" Style="{StaticResource App.Overlay}" Visibility="{qc:Binding '$P ? Visibility.Visible : Visibility.Collapsed', P={Binding IsWorking.Value, Mode=OneWay}}">
            <StackPanel Margin="5 0" HorizontalAlignment="Stretch" VerticalAlignment="Center">
                <TextBlock Text="{le:Loc Text_Working}" HorizontalAlignment="Center" TextAlignment="Center"/>
                <Border Height="10"/>
                <m:ProgressRing/>
            </StackPanel>
        </Border>
    </Grid>

</m:MetroWindow>
