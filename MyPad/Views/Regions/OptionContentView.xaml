<UserControl x:Class="MyPad.Views.Regions.OptionContentView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:p="http://prismlibrary.com/"
             xmlns:m="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:mi="http://metro.mahapps.com/winfx/xaml/iconpacks"
             xmlns:le="http://wpflocalizeextension.codeplex.com"
             xmlns:qc="http://QuickConverter.CodePlex.com/"
             xmlns:ge="clr-namespace:SourceChord.GridExtra;assembly=GridExtra.Wpf"
             xmlns:root="clr-namespace:MyPad"
             xmlns:behaviors="clr-namespace:MyPad.Views.Behaviors"
             xmlns:converters="clr-namespace:MyPad.Views.Converters"
             mc:Ignorable="d" 
             p:ViewModelLocator.AutoWireViewModel="True"
             d:DesignHeight="450" d:DesignWidth="800"
             Cursor="{qc:Binding '$P ? Cursors.Wait : Cursors.Arrow', P={Binding IsWorking.Value, Mode=TwoWay}}">

    <Grid Margin="20 0 20 20">
        <TabControl Padding="5 10 0 0" m:HeaderedControlHelper.HeaderFontWeight="Bold">
            <TabControl.Resources>
                <Style TargetType="{x:Type Label}" BasedOn="{StaticResource Default.Label}">
                    <Setter Property="Margin" Value="5"/>
                </Style>
                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource Default.Button}">
                    <Setter Property="Margin" Value="5"/>
                </Style>
                <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource Default.RadioButton}">
                    <Setter Property="Margin" Value="5"/>
                </Style>
                <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource Default.CheckBox}">
                    <Setter Property="Margin" Value="5"/>
                </Style>
                <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource Default.TextBox}">
                    <Setter Property="Margin" Value="5"/>
                    <Style.Triggers>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.Gray5}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
                <Style TargetType="{x:Type m:NumericUpDown}" BasedOn="{StaticResource Default.NumericUpDown}">
                    <Setter Property="Margin" Value="5"/>
                </Style>
                <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource Default.ComboBox}">
                    <Setter Property="Margin" Value="5"/>
                </Style>
                <Style TargetType="{x:Type GroupBox}" BasedOn="{StaticResource Default.GroupBox}">
                    <Setter Property="Margin" Value="5"/>
                </Style>
                <Style TargetType="{x:Type Expander}" BasedOn="{StaticResource Default.Expander}">
                    <Setter Property="Margin" Value="5"/>
                </Style>
            </TabControl.Resources>

            <TabItem DataContext="{Binding SettingsService.System, Mode=OneWay}" Header="{le:Loc Label_System}">
                <ScrollViewer HorizontalScrollBarVisibility="Disabled">
                    <StackPanel>
                        <Grid ge:GridEx.ColumnDefinition="Auto, *" ge:GridEx.RowDefinition="Auto, Auto, Auto, Auto, Auto, Auto">
                            <Label      Grid.Row="0" Grid.Column="0" Content="{le:Loc Label_Theme}"/>
                            <StackPanel Grid.Row="0" Grid.Column="1" Orientation="Horizontal">
                                <RadioButton Content="{le:Loc Label_SyncAppTheme}" IsChecked="{qc:Binding Convert='(int)$P == 0', ConvertBack='$value ? 0 : DependencyProperty.UnsetValue', P={Binding Theme, Mode=TwoWay}}"/>
                                <RadioButton Content="{le:Loc Label_Dark}"         IsChecked="{qc:Binding Convert='(int)$P == 1', ConvertBack='$value ? 1 : DependencyProperty.UnsetValue', P={Binding Theme, Mode=TwoWay}}"/>
                                <RadioButton Content="{le:Loc Label_Light}"        IsChecked="{qc:Binding Convert='(int)$P == 2', ConvertBack='$value ? 2 : DependencyProperty.UnsetValue', P={Binding Theme, Mode=TwoWay}}"/>
                            </StackPanel>

                            <Label    Grid.Row="1" Grid.Column="0" Content="{le:Loc Label_Language}"/>
                            <ComboBox Grid.Row="1" Grid.Column="1" SelectedValue="{Binding Culture, Mode=TwoWay}" ItemsSource="{x:Static root:Constants.CULTURES}" SelectedValuePath="Name">
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{qc:MultiBinding '$P0 + \' (\' + $P1 + \')\'', P0={Binding Description, Mode=OneWay}, P1={Binding Name, Mode=OneWay}}"/>
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>

                            <Label    Grid.Row="2" Grid.Column="0" Content="{le:Loc Label_Encoding}"/>
                            <ComboBox Grid.Row="2" Grid.Column="1" SelectedValue="{Binding Encoding, Mode=TwoWay}" ItemsSource="{x:Static root:Constants.ENCODINGS}">
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{qc:MultiBinding '$P0 + \' - \' + $P1', P0={Binding CodePage, Mode=OneWay}, P1={Binding EncodingName, Mode=OneWay}}"/>
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>
                            <CheckBox Grid.Row="3" Grid.Column="1" IsChecked="{Binding AutoDetectEncoding, Mode=TwoWay}" Content="{le:Loc LabelText_AutoDetectByDefault}"/>

                            <Label    Grid.Row="4" Grid.Column="0" Content="{le:Loc Label_Syntax}"/>
                            <ComboBox Grid.Row="4" Grid.Column="1" ItemsSource="{qc:Binding 'new string[] { string.Empty }.Concat($P.Keys)', P={Binding DataContext.SyntaxService.Definitions, RelativeSource={RelativeSource FindAncestor, AncestorType=UserControl}, Mode=OneWay}}" SelectedValue="{qc:Binding Convert='$P ?? string.Empty', ConvertBack='string.IsNullOrEmpty($value) ? null : $value', P={Binding SyntaxDefinitionName, Mode=TwoWay}}">
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{qc:Binding 'string.IsNullOrEmpty($P) ? \'Plain Text\' : $P', P={Binding Mode=OneWay}}"/>
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>

                            <Label Grid.Row="5" Grid.Column="0" Content="{le:Loc Label_Font}"/>
                            <Grid  Grid.Row="5" Grid.Column="1" ge:GridEx.ColumnDefinition="5*, *(50-)" DataContext="{Binding DataContext.SettingsService.TextEditor, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}, Mode=OneWay}">
                                <ComboBox Grid.Column="0" SelectedValue="{Binding FontFamily, Mode=TwoWay}" ItemsSource="{x:Static root:Constants.FONT_FAMILIES}">
                                    <ComboBox.ItemTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding Converter={converters:FontFamilyToNameConverter}}" FontFamily="{Binding}"/>
                                        </DataTemplate>
                                    </ComboBox.ItemTemplate>
                                </ComboBox>
                                <ComboBox Grid.Column="1" SelectedValue="{Binding ActualFontSize, Mode=TwoWay}" ItemsSource="{x:Static root:Constants.FONT_SIZES}"/>
                            </Grid>
                        </Grid>

                        <Border Height="10"/>

                        <ge:ResponsiveGrid>
                            <StackPanel ge:ResponsiveGrid.XS="12" ge:ResponsiveGrid.SM="6" Margin="5">
                                <StackPanel>
                                    <CheckBox IsChecked="{Binding SaveWindowPlacement, Mode=TwoWay}"    Content="{le:Loc LabelText_SaveWindowPlacement}"/>
                                    <CheckBox IsChecked="{Binding UseOverlayDialog, Mode=TwoWay}"       Content="{le:Loc LabelText_UseOverlayDialog}"/>
                                    <CheckBox IsChecked="{Binding ShowFullName, Mode=TwoWay}"           Content="{le:Loc LabelText_ShowFullName}"/>
                                    <CheckBox IsChecked="{Binding ShowFileIcon, Mode=TwoWay}"           Content="{le:Loc LabelText_ShowFileIcon}"/>
                                    <CheckBox IsChecked="{Binding ShowSingleTab, Mode=TwoWay}"          Content="{le:Loc LabelText_ShowSingleTab}"/>
                                </StackPanel>
                            </StackPanel>

                            <StackPanel ge:ResponsiveGrid.XS="12" ge:ResponsiveGrid.SM="6" Margin="5">
                                <StackPanel>
                                    <CheckBox IsChecked="{Binding EnableNotificationIcon, Mode=TwoWay}" Content="{le:Loc LabelText_EnableNotificationIcon}"/>
                                    <CheckBox IsChecked="{Binding EnableResident, Mode=TwoWay}"         Content="{le:Loc LabelText_EnableResident}" IsEnabled="{Binding EnableNotificationIcon, Mode=OneWay}"/>
                                </StackPanel>
                                <Border Height="10"/>
                                <StackPanel>
                                    <CheckBox IsChecked="{Binding EnableAutoSave, Mode=TwoWay}" Content="{le:Loc LabelText_EnableAutoSave}"/>
                                    <Grid ge:GridEx.RowDefinition="Auto" ge:GridEx.ColumnDefinition="Auto, 10, Auto" Margin="30 0 0 0">
                                        <Label           Grid.Row="0" Grid.Column="0" Content="{le:Loc Label_AutoSaveInterval}"/>
                                        <m:NumericUpDown Grid.Row="0" Grid.Column="2" Value="{Binding AutoSaveInterval, Mode=TwoWay}" Minimum="1" MinWidth="100"/>
                                    </Grid>
                                </StackPanel>
                            </StackPanel>
                        </ge:ResponsiveGrid>
                    </StackPanel>
                </ScrollViewer>
            </TabItem>

            <TabItem DataContext="{Binding SettingsService.TextEditor, Mode=OneWay}" Header="{le:Loc Label_TextEditor}">
                <ScrollViewer HorizontalScrollBarVisibility="Disabled">
                    <StackPanel>
                        <ge:ResponsiveGrid>
                            <StackPanel ge:ResponsiveGrid.XS="12" ge:ResponsiveGrid.SM="6" Margin="5">
                                <StackPanel>
                                    <CheckBox IsChecked="{Binding HighlightCurrentLine, Mode=TwoWay}"        Content="{le:Loc LabelText_HighlightCurrentLine}"/>
                                    <CheckBox IsChecked="{Binding ShowSpaces, Mode=TwoWay}"                  Content="{le:Loc LabelText_ShowSpaces}"/>
                                    <CheckBox IsChecked="{Binding ShowTabs, Mode=TwoWay}"                    Content="{le:Loc LabelText_ShowTabs}"/>
                                    <CheckBox IsChecked="{Binding ShowBoxForControlCharacters, Mode=TwoWay}" Content="{le:Loc LabelText_ShowBoxForControlCharacters}"/>
                                    <CheckBox IsChecked="{Binding ShowEndOfLine, Mode=TwoWay}"               Content="{le:Loc LabelText_ShowEndOfLine}"/>
                                    <CheckBox IsChecked="{Binding ShowLineNumbers, Mode=TwoWay}"             Content="{le:Loc LabelText_ShowLineNumbers}"/>
                                </StackPanel>

                                <Border Height="10"/>

                                <StackPanel>
                                    <CheckBox IsChecked="{Binding HideCursorWhileTyping, Mode=TwoWay}"                   Content="{le:Loc LabelText_HideCursorWhileTyping}"/>
                                    <CheckBox IsChecked="{Binding CutCopyWholeLine, Mode=TwoWay}"                        Content="{le:Loc LabelText_EnableCutCopyWholeLine}"/>
                                    <CheckBox IsChecked="{Binding WordWrap, Mode=TwoWay}"                                Content="{le:Loc LabelText_EnableWordWrap}"/>
                                    <CheckBox IsChecked="{Binding ConvertTabsToSpaces, Mode=TwoWay}"                     Content="{le:Loc LabelText_ConvertTabsToSpaces}"/>
                                    <CheckBox IsChecked="{Binding RequireControlModifierForHyperlinkClick, Mode=TwoWay}" Content="{le:Loc LabelText_RequireControlModifierForHyperlinkClick}"/>
                                </StackPanel>
                            </StackPanel>

                            <StackPanel ge:ResponsiveGrid.XS="12" ge:ResponsiveGrid.SM="6" Margin="5">
                                <StackPanel>
                                    <CheckBox IsChecked="{Binding EnableImeSupport, Mode=TwoWay}"           Content="{le:Loc LabelText_EnableImeSupport}"/>
                                    <CheckBox IsChecked="{Binding EnableAutoCompletion, Mode=TwoWay}"       Content="{le:Loc LabelText_EnableAutoCompletion}"/>
                                    <CheckBox IsChecked="{Binding EnableTextDragDrop, Mode=TwoWay}"         Content="{le:Loc LabelText_EnableTextDragDrop}"/>
                                    <CheckBox IsChecked="{Binding EnableRectangularSelection, Mode=TwoWay}" Content="{le:Loc LabelText_EnableRectangularSelection}"/>
                                    <CheckBox IsChecked="{Binding EnableVirtualSpace, Mode=TwoWay}"         Content="{le:Loc LabelText_EnableVirtualSpace}"/>
                                    <CheckBox IsChecked="{Binding EnableHyperlinks, Mode=TwoWay}"           Content="{le:Loc LabelText_EnableHyperlinks}"/>
                                    <CheckBox IsChecked="{Binding EnableEmailHyperlinks, Mode=TwoWay}"      Content="{le:Loc LabelText_EnableEmailHyperlinks}"/>
                                    <CheckBox IsChecked="{Binding AllowScrollBelowDocument, Mode=TwoWay}"   Content="{le:Loc LabelText_AllowScrollBelowDocument}"/>
                                    <CheckBox IsChecked="{Binding AllowToggleOverstrikeMode, Mode=TwoWay}"  Content="{le:Loc LabelText_AllowToggleOverstrikeMode}"/>
                                </StackPanel>
                            </StackPanel>
                        </ge:ResponsiveGrid>
                    </StackPanel>
                </ScrollViewer>
            </TabItem>

            <TabItem Header="{le:Loc Label_ConfigFile}">
                <TabItem.Resources>
                    <Style x:Key="IconDropDownButton" TargetType="{x:Type m:DropDownButton}" BasedOn="{StaticResource Default.DropDownButton}">
                        <Setter Property="Margin" Value="0 5"/>
                        <Setter Property="Padding" Value="0"/>
                        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"/>
                    </Style>
                    <Style x:Key="IconButton" TargetType="{x:Type Button}" BasedOn="{StaticResource Default.Button}">
                        <Setter Property="Margin" Value="0 5"/>
                        <Setter Property="Padding" Value="0"/>
                        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"/>
                    </Style>
                    <Style x:Key="IconAccentButton" TargetType="{x:Type Button}" BasedOn="{StaticResource Common.AccentButton}">
                        <Setter Property="Margin" Value="0 5"/>
                        <Setter Property="Padding" Value="0"/>
                        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"/>
                    </Style>
                    <Style x:Key="IconDangerButton" TargetType="{x:Type Button}" BasedOn="{StaticResource Common.DangerButton}">
                        <Setter Property="Margin" Value="0 5"/>
                        <Setter Property="Padding" Value="0"/>
                        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"/>
                    </Style>
                </TabItem.Resources>
                <ScrollViewer HorizontalScrollBarVisibility="Disabled">
                    <Grid ge:GridEx.ColumnDefinition="Auto, *, 5, Auto, Auto" ge:GridEx.RowDefinition="Auto, Auto, Auto">
                        <Label   Grid.Row="0" Grid.Column="0" Content="{le:Loc Label_ExecutionDirectory}"/>
                        <TextBox Grid.Row="0" Grid.Column="1" Text="{Binding ProductInfo.Working, Mode=OneWay}" IsReadOnly="True"/>
                        <Button  Grid.Row="0" Grid.Column="3" ToolTip="{le:Loc Command_Open}" Style="{StaticResource IconButton}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Click">
                                    <behaviors:ProcessStartAction FileName="explorer.exe" Arguments="{Binding ProductInfo.Working, Mode=OneWay}" ThrowException="False"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                            <mi:Modern Kind="FolderOpen"/>
                        </Button>

                        <Label   Grid.Row="1" Grid.Column="0" Content="{le:Loc Label_TempDirectory}"/>
                        <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding ProductInfo.Temporary, Mode=OneWay}" IsReadOnly="True"/>
                        <Button  Grid.Row="1" Grid.Column="3" ToolTip="{le:Loc Command_Open}" Style="{StaticResource IconButton}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Click">
                                    <behaviors:ProcessStartAction FileName="explorer.exe" Arguments="{Binding ProductInfo.Temporary, Mode=OneWay}" ThrowException="False"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                            <mi:Modern Kind="FolderOpen"/>
                        </Button>

                        <Label   Grid.Row="2" Grid.Column="0" Content="{le:Loc Label_AppDataDirectory}"/>
                        <TextBox Grid.Row="2" Grid.Column="1" Text="{Binding ProductInfo.Roaming, Mode=OneWay}" IsReadOnly="True"/>
                        <Button  Grid.Row="2" Grid.Column="3" Command="{Binding OpenAppDataDirectoryCommand, Mode=OneTime}" ToolTip="{le:Loc Command_Open}" Style="{StaticResource IconButton}" BorderThickness="1 1 0 1">
                            <mi:Modern Kind="FolderOpen"/>
                        </Button>
                        <m:DropDownButton Grid.Row="2" Grid.Column="4" Style="{StaticResource IconDropDownButton}" BorderThickness="0 1 1 1" Height="27">
                            <m:DropDownButton.Items>
                                <MenuItem Command="{Binding ExportLogArchiveCommand, Mode=OneTime}" Header="{le:Loc Command_ExportLog}">
                                    <MenuItem.Icon>
                                        <mi:Material Kind="Archive"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                            </m:DropDownButton.Items>
                        </m:DropDownButton>
                    </Grid>
                </ScrollViewer>
            </TabItem>
        </TabControl>

        <Border d:IsHidden="True" Style="{StaticResource App.Overlay}" Visibility="{qc:Binding '$P ? Visibility.Visible : Visibility.Collapsed', P={Binding IsWorking.Value, Mode=OneWay}}">
            <StackPanel Margin="5 0" HorizontalAlignment="Stretch" VerticalAlignment="Center">
                <TextBlock Text="{le:Loc Text_Working}" HorizontalAlignment="Center" TextAlignment="Center"/>
                <Border Height="10"/>
                <m:ProgressRing/>
            </StackPanel>
        </Border>
    </Grid>

</UserControl>
