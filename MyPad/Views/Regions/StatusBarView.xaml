<UserControl x:Class="MyPad.Views.Regions.StatusBarView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:p="http://prismlibrary.com/"
             xmlns:m="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:mi="http://metro.mahapps.com/winfx/xaml/iconpacks"
             xmlns:le="http://wpflocalizeextension.codeplex.com"
             xmlns:qc="http://QuickConverter.CodePlex.com/"
             xmlns:ge="clr-namespace:SourceChord.GridExtra;assembly=GridExtra.Wpf"
             mc:Ignorable="d"
             p:ViewModelLocator.AutoWireViewModel="True"
             d:DesignHeight="450" d:DesignWidth="800">

    <UserControl.Resources>
        <Style TargetType="{x:Type StatusBarItem}" BasedOn="{StaticResource Default.StatusBarItem}">
            <Setter Property="Padding" Value="0"/>
            <Style.Resources>
                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource Default.TextBlock}">
                    <Setter Property="Focusable" Value="False"/>
                    <Setter Property="Padding" Value="5 0"/>
                    <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type StatusBar}}, Mode=OneWay}"/>
                    <Setter Property="Background" Value="{x:Null}"/>
                </Style>
                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource Default.Button}">
                    <Setter Property="Focusable" Value="False"/>
                    <Setter Property="Padding" Value="5 0"/>
                    <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type StatusBar}}, Mode=OneWay}"/>
                    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type StatusBar}}, Mode=OneWay}"/>
                    <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.StatusFontFamilyKey}}"/>
                    <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.StatusFontStyleKey}}"/>
                    <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.StatusFontWeightKey}}"/>
                    <Setter Property="FontSize" Value="{DynamicResource MahApps.Font.Size.StatusBar}"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Accent2}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
                <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource Default.ToggleButton}">
                    <Setter Property="Focusable" Value="False"/>
                    <Setter Property="Padding" Value="5 0"/>
                    <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type StatusBar}}, Mode=OneWay}"/>
                    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type StatusBar}}, Mode=OneWay}"/>
                    <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.StatusFontFamilyKey}}"/>
                    <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.StatusFontStyleKey}}"/>
                    <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.StatusFontWeightKey}}"/>
                    <Setter Property="FontSize" Value="{DynamicResource MahApps.Font.Size.StatusBar}"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Accent2}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type StatusBar}}, Mode=OneWay}"/>
                            <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type StatusBar}}, Mode=OneWay}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
                <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource Default.ComboBox}">
                    <Setter Property="Focusable" Value="False"/>
                    <Setter Property="Padding" Value="5 0"/>
                    <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type StatusBar}}, Mode=OneWay}"/>
                    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type StatusBar}}, Mode=OneWay}"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="m:TextBoxHelper.ButtonWidth" Value="0"/>
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Accent2}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Style.Resources>
        </Style>

        <Style TargetType="{x:Type StatusBar}" BasedOn="{StaticResource Default.StatusBar}">
            <Setter Property="Background" Value="{DynamicResource CyanColorBrush}"/>
            <!-- NOTE: WindowTitleBrush に追従する処理を打ち消す -->
            <Style.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsVisible, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True"/>
                        <Condition Binding="{Binding IsActive, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Mode=OneWay}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource CyanColorBrush}"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsVisible, RelativeSource={RelativeSource Self}, Mode=OneWay}" Value="True"/>
                        <Condition Binding="{Binding IsActive, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Mode=OneWay}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource CyanColorBrush}"/>
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>

    <StatusBar>
        <StatusBar.ItemsPanel>
            <ItemsPanelTemplate>
                <Grid ge:GridEx.ColumnDefinition="*, Auto, Auto, Auto, Auto, Auto"/>
            </ItemsPanelTemplate>
        </StatusBar.ItemsPanel>
        <StatusBarItem Grid.Column="0">
            <TextBlock DataContext="{Binding ActiveTextEditor.Value, Mode=OneWay}"
                       Text="{qc:MultiBinding '$P0 + \' chars (\' + $P1 + \' lines) selected\'', P0={Binding SelectionLength, Mode=OneWay}, P1={Binding SelectionLineCount, Mode=OneWay}}" Visibility="{qc:Binding '$P == 0 ? Visibility.Collapsed : Visibility.Visible', P={Binding SelectionLength, Mode=OneWay}}"/>
        </StatusBarItem>
        <StatusBarItem Grid.Column="1">
            <Button>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <i:InvokeCommandAction Command="{Binding GoToLineCommand, Mode=OneTime}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <Button.Content>
                    <TextBlock DataContext="{Binding ActiveTextEditor.Value, Mode=OneWay}"
                               Text="{qc:MultiBinding '\'Ln \' + $P0 + \' - Col \' + $P1 + \' (\' + $P2 + \')\'', P0={Binding Line, Mode=OneWay}, P1={Binding Column, Mode=OneWay}, P2={Binding CharName, Mode=OneWay}}"/>
                </Button.Content>
            </Button>
        </StatusBarItem>
        <StatusBarItem Grid.Column="2">
            <Button>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <i:InvokeCommandAction Command="{Binding ChangeEncodingCommand, Mode=OneTime}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <Button.Content>
                    <TextBlock DataContext="{Binding ActiveTextEditor.Value, Mode=OneWay}"
                               Text="{qc:Binding '$P.CodePage + \' - \' + $P.EncodingName', P={Binding Encoding, Mode=OneWay}}"/>
                </Button.Content>
            </Button>
        </StatusBarItem>
        <StatusBarItem Grid.Column="3">
            <Button>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <i:InvokeCommandAction Command="{Binding ChangeSyntaxCommand, Mode=OneTime}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <Button.Content>
                    <TextBlock DataContext="{Binding ActiveTextEditor.Value, Mode=OneWay}"
                               Text="{qc:Binding '$P?.Name ?? \'Plain Text\'', P={Binding SyntaxDefinition, Mode=OneWay}}"/>
                </Button.Content>
            </Button>
        </StatusBarItem>
        <StatusBarItem Grid.Column="4">
            <ToggleButton IsChecked="{Binding ActiveTextEditor.Value.OverstrikeMode, Mode=TwoWay}">
                <ToggleButton.Content>
                    <TextBlock DataContext="{Binding ActiveTextEditor.Value, Mode=OneWay}"
                               Text="{qc:Binding '$P ? \'OVER\' : \'INS\'', P={Binding OverstrikeMode, Mode=OneWay}}"/>
                </ToggleButton.Content>
            </ToggleButton>
        </StatusBarItem>
        <StatusBarItem Grid.Column="5">
            <ResizeGrip IsHitTestVisible="False" Visibility="Hidden"/>
        </StatusBarItem>
    </StatusBar>

</UserControl>
