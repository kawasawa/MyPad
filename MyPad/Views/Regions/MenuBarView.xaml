<UserControl x:Class="MyPad.Views.Regions.MenuBarView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:p="http://prismlibrary.com/"
             xmlns:m="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:mi="http://metro.mahapps.com/winfx/xaml/iconpacks"
             xmlns:le="http://wpflocalizeextension.codeplex.com"
             xmlns:qc="http://QuickConverter.CodePlex.com/"
             xmlns:ge="clr-namespace:SourceChord.GridExtra;assembly=GridExtra.Wpf"
             xmlns:ae="http://icsharpcode.net/sharpdevelop/avalonedit"
             xmlns:views="clr-namespace:MyPad.Views"
             xmlns:controls="clr-namespace:MyPad.Views.Controls"
             xmlns:markup="clr-namespace:MyPad.Views.Markup"
             mc:Ignorable="d"
             p:ViewModelLocator.AutoWireViewModel="True"
             d:DesignHeight="450" d:DesignWidth="800">

    <Menu>
        <MenuItem Header="{le:Loc Command_File}">
            <MenuItem Command="{Binding NewCommand, Mode=OneTime}"
                      Header="{le:Loc {markup:CommandResourceKey NewCommand}}"
                      InputGestureText="{markup:CommandKeyGestureText NewCommand}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="NewFile"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{Binding NewWindowCommand, Mode=OneTime}"
                      Header="{le:Loc {markup:CommandResourceKey NewWindowCommand}}"
                      InputGestureText="{markup:CommandKeyGestureText NewWindowCommand}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="EmptyWindow"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{Binding OpenCommand, Mode=OneTime}"
                      Header="{le:Loc {markup:CommandResourceKey OpenCommand}}"
                      HeaderStringFormat="{}{0}..."
                      InputGestureText="{markup:CommandKeyGestureText OpenCommand}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="FolderOpened"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{Binding SaveCommand, Mode=OneTime}"
                      Header="{le:Loc {markup:CommandResourceKey SaveCommand}}"
                      InputGestureText="{markup:CommandKeyGestureText SaveCommand}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="Save"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{Binding SaveAsCommand, Mode=OneTime}"
                      Header="{le:Loc {markup:CommandResourceKey SaveAsCommand}}"
                      HeaderStringFormat="{}{0}..."
                      InputGestureText="{markup:CommandKeyGestureText SaveAsCommand}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="SaveAs"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{Binding SaveAllCommand, Mode=OneTime}"
                      Header="{le:Loc {markup:CommandResourceKey SaveAllCommand}}"
                      InputGestureText="{markup:CommandKeyGestureText SaveAllCommand}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="SaveAll"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{Binding PrintDirectCommand, Mode=OneTime}"
                      Header="{le:Loc {markup:CommandResourceKey PrintDirectCommand}}"
                      HeaderStringFormat="{}{0}..."
                      InputGestureText="{markup:CommandKeyGestureText PrintDirectCommand}">
                <MenuItem.Icon>
                    <mi:BootstrapIcons Kind="Printer"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{Binding PrintPreviewCommand, Mode=OneTime}"
                      Header="{le:Loc {markup:CommandResourceKey PrintPreviewCommand}}"
                      HeaderStringFormat="{}{0}..."
                      InputGestureText="{markup:CommandKeyGestureText PrintPreviewCommand}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="FileMedia"/>
                </MenuItem.Icon>
            </MenuItem>
            <Separator/>
            <MenuItem Command="Close"
                      Header="{le:Loc {markup:CommandResourceKey Close}}"
                      InputGestureText="{markup:CommandKeyGestureText Close}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="Close"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{Binding ExitApplicationCommand, Mode=OneTime}"
                      Header="{le:Loc {markup:CommandResourceKey ExitApplicationCommand}}"
                      InputGestureText="{markup:CommandKeyGestureText ExitApplicationCommand}">
            </MenuItem>
        </MenuItem>
        <MenuItem Header="{le:Loc Command_Edit}">
            <MenuItem Command="Undo"
                      Header="{le:Loc {markup:CommandResourceKey Undo}}"
                      InputGestureText="{markup:CommandKeyGestureText Undo}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="Discard"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="Redo"
                      Header="{le:Loc {markup:CommandResourceKey Redo}}"
                      InputGestureText="{markup:CommandKeyGestureText Redo}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="Redo"/>
                </MenuItem.Icon>
            </MenuItem>
            <Separator/>
            <MenuItem Command="Cut"
                      Header="{le:Loc {markup:CommandResourceKey Cut}}"
                      InputGestureText="{markup:CommandKeyGestureText Cut}">
                <MenuItem.Icon>
                    <mi:Modern Kind="Scissor"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="Copy"
                      Header="{le:Loc {markup:CommandResourceKey Copy}}"
                      InputGestureText="{markup:CommandKeyGestureText Copy}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="Copy"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="Paste"
                      Header="{le:Loc {markup:CommandResourceKey Paste}}"
                      InputGestureText="{markup:CommandKeyGestureText Paste}">
                <MenuItem.Icon>
                    <mi:Material Kind="ClipboardFileOutline"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="EditingCommands.Delete"
                      Header="{le:Loc {markup:CommandResourceKey Delete}}"
                      InputGestureText="{markup:CommandKeyGestureText Delete}">
                <MenuItem.Icon>
                    <mi:Material Kind="BackspaceOutline"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="SelectAll"
                      Header="{le:Loc {markup:CommandResourceKey SelectAll}}"
                      InputGestureText="{markup:CommandKeyGestureText SelectAll}">
                <MenuItem.Icon>
                    <mi:Material Kind="CursorDefaultClickOutline"/>
                </MenuItem.Icon>
            </MenuItem>
            <Separator/>
            <MenuItem Header="{le:Loc Command_Movement}">
                <MenuItem Command="EditingCommands.MoveLeftByWord"
                          Header="{le:Loc {markup:CommandResourceKey MoveLeftByWord}}"
                          InputGestureText="{markup:CommandKeyGestureText MoveLeftByWord}"/>
                <MenuItem Command="EditingCommands.MoveRightByWord"
                          Header="{le:Loc {markup:CommandResourceKey MoveRightByWord}}"
                          InputGestureText="{markup:CommandKeyGestureText MoveRightByWord}"/>
                <MenuItem Command="EditingCommands.MoveToLineStart"
                          Header="{le:Loc {markup:CommandResourceKey MoveToLineStart}}"
                          InputGestureText="{markup:CommandKeyGestureText MoveToLineStart}"/>
                <MenuItem Command="EditingCommands.MoveToLineEnd"
                          Header="{le:Loc {markup:CommandResourceKey MoveToLineEnd}}"
                          InputGestureText="{markup:CommandKeyGestureText MoveToLineEnd}"/>
                <MenuItem Command="EditingCommands.MoveUpByPage"
                          Header="{le:Loc {markup:CommandResourceKey MoveUpByPage}}"
                          InputGestureText="{markup:CommandKeyGestureText MoveUpByPage}"/>
                <MenuItem Command="EditingCommands.MoveDownByPage"
                          Header="{le:Loc {markup:CommandResourceKey MoveDownByPage}}"
                          InputGestureText="{markup:CommandKeyGestureText MoveDownByPage}"/>
                <MenuItem Command="EditingCommands.MoveToDocumentStart"
                          Header="{le:Loc {markup:CommandResourceKey MoveToDocumentStart}}"
                          InputGestureText="{markup:CommandKeyGestureText MoveToDocumentStart}"/>
                <MenuItem Command="EditingCommands.MoveToDocumentEnd"
                          Header="{le:Loc {markup:CommandResourceKey MoveToDocumentEnd}}"
                          InputGestureText="{markup:CommandKeyGestureText MoveToDocumentEnd}"/>
            </MenuItem>
            <MenuItem Header="{le:Loc Command_Select}">
                <MenuItem Command="EditingCommands.SelectLeftByWord"
                          Header="{le:Loc {markup:CommandResourceKey SelectLeftByWord}}"
                          InputGestureText="{markup:CommandKeyGestureText SelectLeftByWord}"/>
                <MenuItem Command="EditingCommands.SelectRightByWord"
                          Header="{le:Loc {markup:CommandResourceKey SelectRightByWord}}"
                          InputGestureText="{markup:CommandKeyGestureText SelectRightByWord}"/>
                <MenuItem Command="EditingCommands.SelectToLineStart"
                          Header="{le:Loc {markup:CommandResourceKey SelectToLineStart}}"
                          InputGestureText="{markup:CommandKeyGestureText SelectToLineStart}"/>
                <MenuItem Command="EditingCommands.SelectToLineEnd"
                          Header="{le:Loc {markup:CommandResourceKey SelectToLineEnd}}"
                          InputGestureText="{markup:CommandKeyGestureText SelectToLineEnd}"/>
                <MenuItem Command="EditingCommands.SelectUpByPage"
                          Header="{le:Loc {markup:CommandResourceKey SelectUpByPage}}"
                          InputGestureText="{markup:CommandKeyGestureText SelectUpByPage}"/>
                <MenuItem Command="EditingCommands.SelectDownByPage"
                          Header="{le:Loc {markup:CommandResourceKey SelectDownByPage}}"
                          InputGestureText="{markup:CommandKeyGestureText SelectDownByPage}"/>
                <MenuItem Command="EditingCommands.SelectToDocumentStart"
                          Header="{le:Loc {markup:CommandResourceKey SelectToDocumentStart}}"
                          InputGestureText="{markup:CommandKeyGestureText SelectToDocumentStart}"/>
                <MenuItem Command="EditingCommands.SelectToDocumentEnd"
                          Header="{le:Loc {markup:CommandResourceKey SelectToDocumentEnd}}"
                          InputGestureText="{markup:CommandKeyGestureText SelectToDocumentEnd}"/>
            </MenuItem>
            <MenuItem Header="{le:Loc Command_Formatting}">
                <MenuItem Command="controls:TextArea+Commands.ConvertToNarrow"
                          Header="{le:Loc {markup:CommandResourceKey ConvertToNarrow}}"
                          InputGestureText="{markup:CommandKeyGestureText ConvertToNarrow}"/>
                <MenuItem Command="controls:TextArea+Commands.ConvertToWide"
                          Header="{le:Loc {markup:CommandResourceKey ConvertToWide}}"
                          InputGestureText="{markup:CommandKeyGestureText ConvertToWide}"/>
                <Separator/>
                <MenuItem Command="ae:AvalonEditCommands.ConvertToLowercase"
                          Header="{le:Loc {markup:CommandResourceKey ConvertToLowercase}}"
                          InputGestureText="{markup:CommandKeyGestureText ConvertToLowercase}"/>
                <MenuItem Command="ae:AvalonEditCommands.ConvertToUppercase"
                          Header="{le:Loc {markup:CommandResourceKey ConvertToUppercase}}"
                          InputGestureText="{markup:CommandKeyGestureText ConvertToUppercase}"/>
                <MenuItem Command="ae:AvalonEditCommands.ConvertToTitleCase"
                          Header="{le:Loc {markup:CommandResourceKey ConvertToTitleCase}}"
                          InputGestureText="{markup:CommandKeyGestureText ConvertToTitleCase}"/>
                <Separator/>
                <MenuItem Command="ae:AvalonEditCommands.ConvertTabsToSpaces"
                          Header="{le:Loc {markup:CommandResourceKey ConvertTabsToSpaces}}"
                          InputGestureText="{markup:CommandKeyGestureText ConvertTabsToSpaces}"/>
                <MenuItem Command="ae:AvalonEditCommands.ConvertSpacesToTabs"
                          Header="{le:Loc {markup:CommandResourceKey ConvertSpacesToTabs}}"
                          InputGestureText="{markup:CommandKeyGestureText ConvertSpacesToTabs}"/>
            </MenuItem>
            <MenuItem Header="{le:Loc Command_Coding}">
                <MenuItem Command="controls:TextArea+Commands.Completion"
                          Header="{le:Loc {markup:CommandResourceKey Completion}}"
                          InputGestureText="{markup:CommandKeyGestureText Completion}">
                    <MenuItem.Icon>
                        <mi:Codicons Kind="Wand"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Command="controls:TextArea+Commands.Folding"
                          Header="{le:Loc {markup:CommandResourceKey Folding}}"
                          InputGestureText="{markup:CommandKeyGestureText Folding}">
                    <MenuItem.Icon>
                        <mi:Codicons Kind="Fold"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Command="controls:TextArea+Commands.Unfolding"
                          Header="{le:Loc {markup:CommandResourceKey Unfolding}}"
                          InputGestureText="{markup:CommandKeyGestureText Unfolding}">
                    <MenuItem.Icon>
                        <mi:Codicons Kind="Unfold"/>
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
        </MenuItem>
        <MenuItem Header="{le:Loc Command_Find}">
            <MenuItem Command="Find"
                      Header="{le:Loc {markup:CommandResourceKey Find}}"
                      InputGestureText="{markup:CommandKeyGestureText Find}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="Search"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="ae:SearchCommands.FindNext"
                      Header="{le:Loc {markup:CommandResourceKey FindNext}}"
                      InputGestureText="{markup:CommandKeyGestureText FindNext}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="ArrowDown"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="ae:SearchCommands.FindPrevious"
                      Header="{le:Loc {markup:CommandResourceKey FindPrevious}}"
                      InputGestureText="{markup:CommandKeyGestureText FindPrevious}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="ArrowUp"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="Replace"
                      Header="{le:Loc {markup:CommandResourceKey Replace}}"
                      InputGestureText="{markup:CommandKeyGestureText Replace}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="Replace"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{Binding GoToLineCommand, Mode=OneWay}"
                      Header="{le:Loc {markup:CommandResourceKey GoToLineCommand}}"
                      HeaderStringFormat="{}{0}..."
                      InputGestureText="{markup:CommandKeyGestureText GoToLineCommand}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="GoToFile"/>
                </MenuItem.Icon>
            </MenuItem>
        </MenuItem>
        <MenuItem Header="{le:Loc Command_View}">
            <MenuItem Header="{le:Loc Command_Zoom}">
                <MenuItem Command="controls:TextArea+Commands.ZoomIn"
                          Header="{le:Loc {markup:CommandResourceKey ZoomIn}}"
                          InputGestureText="{markup:CommandKeyGestureText ZoomIn}">
                    <MenuItem.Icon>
                        <mi:Modern Kind="TextSizePlus"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Command="controls:TextArea+Commands.ZoomOut"
                          Header="{le:Loc {markup:CommandResourceKey ZoomOut}}"
                          InputGestureText="{markup:CommandKeyGestureText ZoomOut}">
                    <MenuItem.Icon>
                        <mi:Modern Kind="TextSizeMinus"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Command="controls:TextArea+Commands.ZoomReset"
                          Header="{le:Loc {markup:CommandResourceKey ZoomReset}}"
                          InputGestureText="{markup:CommandKeyGestureText ZoomReset}">
                    <MenuItem.Icon>
                        <mi:Modern Kind="TextSize"/>
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
            <MenuItem Click="{qc:QuickEvent '$dataContext.Topmost = !$dataContext.Topmost'}"
                      DataContext="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Mode=OneWay}"
                      Header="{le:Loc Command_Topmost}">
                <MenuItem.Icon>
                    <mi:PackIconBootstrapIcons Foreground="{DynamicResource MahApps.Brushes.ThemeForeground}">
                        <mi:PackIconBootstrapIcons.Resources>
                            <Style TargetType="{x:Type mi:PackIconBootstrapIcons}">
                                <Setter Property="Kind" Value="PinAngle"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Topmost, Mode=OneWay}" Value="True">
                                        <Setter Property="Kind" Value="PinFill"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </mi:PackIconBootstrapIcons.Resources>
                    </mi:PackIconBootstrapIcons>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{Binding SwitchFullScreenModeCommand, Mode=OneTime, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
                      Header="{le:Loc {markup:CommandResourceKey SwitchFullScreenModeCommand}}"
                      InputGestureText="{markup:CommandKeyGestureText SwitchFullScreenModeCommand}">
                <MenuItem.Icon>
                    <mi:BootstrapIcons Kind="ArrowsFullscreen"/>
                </MenuItem.Icon>
            </MenuItem>
            <Separator/>
            <MenuItem Command="{x:Static views:MainWindow.ActivateExplorerCommand}"
                      Header="{le:Loc {markup:CommandResourceKey ActivateExplorerCommand}}"
                      InputGestureText="{markup:CommandKeyGestureText ActivateExplorerCommand}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="Files"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{x:Static views:MainWindow.ActivateGrepCommand}"
                      Header="{le:Loc {markup:CommandResourceKey ActivateGrepCommand}}"
                      InputGestureText="{markup:CommandKeyGestureText ActivateGrepCommand}">
                <MenuItem.Icon>
                    <mi:VaadinIcons Kind="FolderSearch"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{x:Static views:MainWindow.ActivatePropertyCommand}"
                      Header="{le:Loc {markup:CommandResourceKey ActivatePropertyCommand}}"
                      InputGestureText="{markup:CommandKeyGestureText ActivatePropertyCommand}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="File"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{x:Static views:MainWindow.ActivateTerminalCommand}"
                      Header="{le:Loc {markup:CommandResourceKey ActivateTerminalCommand}}"
                      InputGestureText="{markup:CommandKeyGestureText ActivateTerminalCommand}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="Terminal"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{x:Static views:MainWindow.ActivateScriptRunnerCommand}"
                      Header="{le:Loc {markup:CommandResourceKey ActivateScriptRunnerCommand}}"
                      InputGestureText="{markup:CommandKeyGestureText ActivateScriptRunnerCommand}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="Code"/>
                </MenuItem.Icon>
            </MenuItem>
            <Separator/>
            <MenuItem IsCheckable="True"
                      IsChecked="{Binding Settings.System.ShowMenuBar, Mode=TwoWay}"
                      Header="{le:Loc Command_ShowMenuBar}"/>
            <MenuItem IsCheckable="True"
                      IsChecked="{Binding Settings.System.ShowToolBar, Mode=TwoWay}"
                      Header="{le:Loc Command_ShowToolBar}"/>
            <MenuItem IsCheckable="True"
                      IsChecked="{Binding Settings.System.ShowSideBar, Mode=TwoWay}"
                      Header="{le:Loc Command_ShowSideBar}"/>
            <MenuItem IsCheckable="True"
                      IsChecked="{Binding Settings.System.ShowStatusBar, Mode=TwoWay}"
                      Header="{le:Loc Command_ShowStatusBar}"/>
        </MenuItem>
        <MenuItem Header="{le:Loc Command_Tools}">
            <MenuItem Command="{Binding OptionCommand, Mode=OneTime}"
                      Header="{le:Loc {markup:CommandResourceKey OptionCommand}}"
                      HeaderStringFormat="{}{0}..."
                      InputGestureText="{markup:CommandKeyGestureText OptionCommand}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="Gear"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{Binding MaintenanceCommand, Mode=OneTime}"
                      Header="{le:Loc {markup:CommandResourceKey MaintenanceCommand}}"
                      HeaderStringFormat="{}{0}..."
                      InputGestureText="{markup:CommandKeyGestureText MaintenanceCommand}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="Graph"/>
                </MenuItem.Icon>
            </MenuItem>
            <Separator/>
            <MenuItem Command="{Binding ChangeEncodingCommand, Mode=OneTime}"
                      Header="{le:Loc {markup:CommandResourceKey ChangeEncodingCommand}}"
                      HeaderStringFormat="{}{0}..."
                      InputGestureText="{markup:CommandKeyGestureText ChangeEncodingCommand}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="SymbolKey"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{Binding ChangeSyntaxCommand, Mode=OneTime}"
                      Header="{le:Loc {markup:CommandResourceKey ChangeSyntaxCommand}}"
                      HeaderStringFormat="{}{0}..."
                      InputGestureText="{markup:CommandKeyGestureText ChangeSyntaxCommand}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="Json"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{Binding DiffCommand, Mode=OneTime}"
                      Header="{le:Loc {markup:CommandResourceKey DiffCommand}}"
                      HeaderStringFormat="{}{0}..."
                      InputGestureText="{markup:CommandKeyGestureText DiffCommand}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="Diff"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{Binding DiffUnmodifiedCommand, Mode=OneTime}"
                      Header="{le:Loc {markup:CommandResourceKey DiffUnmodifiedCommand}}"
                      HeaderStringFormat="{}{0}..."
                      InputGestureText="{markup:CommandKeyGestureText DiffUnmodifiedCommand}">
                <MenuItem.Icon>
                    <mi:Material Kind="FileCompare"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{Binding SwitchPomodoroTimerCommand, Mode=OneTime}"
                      Header="{le:Loc {markup:CommandResourceKey SwitchPomodoroTimerCommand}}"
                      HeaderStringFormat="{}{0}..."
                      InputGestureText="{markup:CommandKeyGestureText SwitchPomodoroTimerCommand}">
                <MenuItem.Icon>
                    <mi:Material Kind="TimerOutline"/>
                </MenuItem.Icon>
            </MenuItem>
        </MenuItem>
        <MenuItem Header="{le:Loc Command_Help}">
            <MenuItem Command="{Binding AboutCommand, Mode=OneTime}"
                      Header="{le:Loc {markup:CommandResourceKey AboutCommand}}"
                      HeaderStringFormat="{}{0}..."
                      InputGestureText="{markup:CommandKeyGestureText AboutCommand}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="Info"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{Binding ShortcutKeysCommand, Mode=OneTime}"
                      Header="{le:Loc {markup:CommandResourceKey ShortcutKeysCommand}}"
                      HeaderStringFormat="{}{0}..."
                      InputGestureText="{markup:CommandKeyGestureText ShortcutKeysCommand}">
                <MenuItem.Icon>
                    <mi:Codicons Kind="RecordKeys"/>
                </MenuItem.Icon>
            </MenuItem>
        </MenuItem>
    </Menu>

</UserControl>
